<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="enabling_buffer_device_address" kind="page">
    <compoundname>enabling_buffer_device_address</compoundname>
    <title>Enabling buffer device address</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Device extension VK_KHR_buffer_device_address allow to fetch raw GPU pointer to a buffer and pass it for usage in a shader code. It has been promoted to core Vulkan 1.2.</para>
<para>If you want to use this feature in connection with VMA, follow these steps:</para>
<sect1 id="enabling_buffer_device_address_1enabling_buffer_device_address_initialization">
<title>Initialization</title>
<para>1) (For Vulkan version &lt; 1.2) Call `vkEnumerateDeviceExtensionProperties` for the physical device. Check if the extension is supported - if returned array of `VkExtensionProperties` contains &quot;VK_KHR_buffer_device_address&quot;.</para>
<para>2) Call `vkGetPhysicalDeviceFeatures2` for the physical device instead of old `vkGetPhysicalDeviceFeatures`. Attach additional structure `VkPhysicalDeviceBufferDeviceAddressFeatures*` to `VkPhysicalDeviceFeatures2::pNext` to be returned. Check if the device feature is really supported - check if `VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress` is true.</para>
<para>3) (For Vulkan version &lt; 1.2) While creating device with `vkCreateDevice`, enable this extension - add &quot;VK_KHR_buffer_device_address&quot; to the list passed as `VkDeviceCreateInfo::ppEnabledExtensionNames`.</para>
<para>4) While creating the device, also don&apos;t set `VkDeviceCreateInfo::pEnabledFeatures`. Fill in `VkPhysicalDeviceFeatures2` structure instead and pass it as `VkDeviceCreateInfo::pNext`. Enable this device feature - attach additional structure `VkPhysicalDeviceBufferDeviceAddressFeatures*` to `VkPhysicalDeviceFeatures2::pNext` and set its member `bufferDeviceAddress` to `VK_TRUE`.</para>
<para>5) While creating <ref refid="struct_vma_allocator" kindref="compound">VmaAllocator</ref> with <ref refid="group__group__init_1gaf77c946fbecfcc54d02c3d1c1e7e23e7" kindref="member">vmaCreateAllocator()</ref> inform VMA that you have enabled this feature - add <ref refid="group__group__init_1gga4f87c9100d154a65a4ad495f7763cf7ca5f1b28b0414319d1687e1f2b30ab0089" kindref="member">VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT</ref> to <ref refid="struct_vma_allocator_create_info_1a392ea2ecbaff93f91a7c49f735ad4346" kindref="member">VmaAllocatorCreateInfo::flags</ref>.</para>
</sect1>
<sect1 id="enabling_buffer_device_address_1enabling_buffer_device_address_usage">
<title>Usage</title>
<para>After following steps described above, you can create buffers with `VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT*` using VMA. The library automatically adds `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT*` to allocated memory blocks wherever it might be needed.</para>
<para>Please note that the library supports only `VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT*`. The second part of this functionality related to &quot;capture and replay&quot; is not supported, as it is intended for usage in debugging tools like RenderDoc, not in everyday Vulkan usage.</para>
</sect1>
<sect1 id="enabling_buffer_device_address_1enabling_buffer_device_address_more_information">
<title>More information</title>
<para>To learn more about this extension, see [VK_KHR_buffer_device_address in Vulkan specification](<ulink url="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/chap46.html#VK_KHR_buffer_device_address">https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/chap46.html#VK_KHR_buffer_device_address</ulink>)</para>
<para>Example use of this extension can be found in the code of the sample and test suite accompanying this library. </para>
</sect1>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h"/>
  </compounddef>
</doxygen>
