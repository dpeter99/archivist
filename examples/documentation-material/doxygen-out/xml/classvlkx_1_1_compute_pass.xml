<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classvlkx_1_1_compute_pass" kind="class" language="C++" prot="public">
    <compoundname>vlkx::ComputePass</compoundname>
    <basecompoundref refid="classvlkx_1_1_common_pass" prot="public" virt="non-virtual">vlkx::CommonPass</basecompoundref>
    <includes refid="_g_p_u_pass_8h" local="no">GPUPass.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1a9d0668277a8cb8126cad82d2e7d8c77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vlkx::ComputePass::ComputePass</definition>
        <argsstring>(const ComputePass &amp;)=delete</argsstring>
        <name>ComputePass</name>
        <qualifiedname>vlkx::ComputePass::ComputePass</qualifiedname>
        <param>
          <type>const <ref refid="classvlkx_1_1_compute_pass" kindref="compound">ComputePass</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="195" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1aba8b60e042cfceac067f8537df1329a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvlkx_1_1_compute_pass" kindref="compound">ComputePass</ref> &amp;</type>
        <definition>ComputePass &amp; vlkx::ComputePass::operator=</definition>
        <argsstring>(const ComputePass &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>vlkx::ComputePass::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classvlkx_1_1_compute_pass" kindref="compound">ComputePass</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="196" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1a407a5b287ebf738a4a0d22c430fd1890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_generic_render_pass_8h_1a68b39832e0bbd552c45aae02054bbe79" kindref="member">fluent</ref></type>
        <definition>ComputePass &amp; vlkx::ComputePass::add</definition>
        <argsstring>(std::string &amp;&amp;name, UsageTracker &amp;&amp;history)</argsstring>
        <name>add</name>
        <qualifiedname>vlkx::ComputePass::add</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classvlkx_1_1_usage_tracker" kindref="compound">UsageTracker</ref> &amp;&amp;</type>
          <declname>history</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add the given image as an attachment to the compute shader pass. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>the usage history of the image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classvlkx_1_1_compute_pass" kindref="compound">ComputePass</ref> instance, for chaining. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="206" column="16" bodyfile="shadow-engine/shadow-renderer/src/render/render_pass/GPUPass.cpp" bodystart="318" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1a7d85c21146deb752bbac0dbce9d43952" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_generic_render_pass_8h_1a68b39832e0bbd552c45aae02054bbe79" kindref="member">fluent</ref></type>
        <definition>fluent vlkx::ComputePass::add</definition>
        <argsstring>(const std::string &amp;name, UsageTracker &amp;&amp;history)</argsstring>
        <name>add</name>
        <qualifiedname>vlkx::ComputePass::add</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classvlkx_1_1_usage_tracker" kindref="compound">UsageTracker</ref> &amp;&amp;</type>
          <declname>history</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="207" column="16" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1ae63423a9a0273c02f692e3973b4f08e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vlkx::ComputePass::execute</definition>
        <argsstring>(const VkCommandBuffer &amp;commands, uint32_t queueFamily, const std::map&lt; std::string, const VkImage * &gt; &amp;images, const std::vector&lt; std::function&lt; void()&gt; &gt; &amp;computeOps) const</argsstring>
        <name>execute</name>
        <qualifiedname>vlkx::ComputePass::execute</qualifiedname>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queueFamily</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, const VkImage * &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::function&lt; void()&gt; &gt; &amp;</type>
          <declname>computeOps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run computeOps, insert memory barriers to transition used images into the appropriate format. Images must be a superset of all images that were called with <ref refid="classvlkx_1_1_compute_pass_1a407a5b287ebf738a4a0d22c430fd1890" kindref="member">add()</ref>. Compute_ops must be equal to the number of subpasses. Commands must be recording. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>the command buffer to write into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queueFamily</parametername>
</parameternamelist>
<parameterdescription>
<para>the family to use for inserting barriers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>images</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of images that were used in the compute pass </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>computeOps</parametername>
</parameternamelist>
<parameterdescription>
<para>the compute functions to upload to the GPU </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="221" column="14" bodyfile="shadow-engine/shadow-renderer/src/render/render_pass/GPUPass.cpp" bodystart="324" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1a43a53ec0ac734ded1533e0094749555c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vlkx::ComputePass::barrier</definition>
        <argsstring>(const VkCommandBuffer &amp;commands, uint32_t queueFamily, const VkImage &amp;image, const ImageUsage &amp;prev, const ImageUsage &amp;current) const</argsstring>
        <name>barrier</name>
        <qualifiedname>vlkx::ComputePass::barrier</qualifiedname>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queueFamily</declname>
        </param>
        <param>
          <type>const VkImage &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="classvlkx_1_1_image_usage" kindref="compound">ImageUsage</ref> &amp;</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>const <ref refid="classvlkx_1_1_image_usage" kindref="compound">ImageUsage</ref> &amp;</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a memory barrier, to transition the layout of the image from the previous to the curent. The barrier is performed using the given queue family. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>the command buffer to write into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queueFamily</parametername>
</parameternamelist>
<parameterdescription>
<para>the family to use for inserting barriers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of images that were used in the compute pass </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>the previous usage of the image; the state being transitioned from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>the new usage of the image; the state being transitioned to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="232" column="14" bodyfile="shadow-engine/shadow-renderer/src/render/render_pass/GPUPass.cpp" bodystart="352" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pass_1ab48a3f852b62138c0730d95e7e82045e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vlkx::ComputePass::verify</definition>
        <argsstring>(const std::string &amp;name, const UsageTracker &amp;history) const</argsstring>
        <name>verify</name>
        <qualifiedname>vlkx::ComputePass::verify</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classvlkx_1_1_usage_tracker" kindref="compound">UsageTracker</ref> &amp;</type>
          <declname>history</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify whether the previous usages of the given image in its&apos; history is compatible with a compute shader. For example, a fragment shader output image is not compatible. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the image being checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>the usage history of the image/ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="240" column="14" bodyfile="shadow-engine/shadow-renderer/src/render/render_pass/GPUPass.cpp" bodystart="387" bodyend="393"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The Common Pass implementation for Compute Shaders. That is, shaders that do not write to color buffers. A subpass can execute multiple compute shaders unbarriered, which increases efficiency. We still need to transition images between passes when necessary, hence the wrapper. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>vlkx::CommonPass</label>
        <link refid="classvlkx_1_1_common_pass"/>
      </node>
      <node id="1">
        <label>vlkx::ComputePass</label>
        <link refid="classvlkx_1_1_compute_pass"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>vlkx::CommonPass</label>
        <link refid="classvlkx_1_1_common_pass"/>
      </node>
      <node id="1">
        <label>vlkx::ComputePass</label>
        <link refid="classvlkx_1_1_compute_pass"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" line="192" column="5" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/render/render_pass/GPUPass.h" bodystart="192" bodyend="241"/>
    <listofallmembers>
      <member refid="classvlkx_1_1_compute_pass_1a407a5b287ebf738a4a0d22c430fd1890" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>add</name></member>
      <member refid="classvlkx_1_1_compute_pass_1a7d85c21146deb752bbac0dbce9d43952" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>add</name></member>
      <member refid="classvlkx_1_1_common_pass_1a363fdb3c8cd8a0be814d1e2cc4e86188" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>addUsage</name></member>
      <member refid="classvlkx_1_1_compute_pass_1a43a53ec0ac734ded1533e0094749555c" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>barrier</name></member>
      <member refid="classvlkx_1_1_common_pass_1a9572aa2ed2e03b85484940ebf584a993" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>checkForSync</name></member>
      <member refid="classvlkx_1_1_common_pass_1a2f96fb205a65ec563552172cba691771" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>CommonPass</name></member>
      <member refid="classvlkx_1_1_common_pass_1a1b9262c051f528437e8f2bade6513003" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>CommonPass</name></member>
      <member refid="classvlkx_1_1_compute_pass_1a9d0668277a8cb8126cad82d2e7d8c77d" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>ComputePass</name></member>
      <member refid="classvlkx_1_1_compute_pass_1ae63423a9a0273c02f692e3973b4f08e6" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>execute</name></member>
      <member refid="classvlkx_1_1_common_pass_1a27b43bff62d86ad2d8b1a38ee5246ef5" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getFinalLayout</name></member>
      <member refid="classvlkx_1_1_common_pass_1a28959152e1f9a81700128fcf8570406a" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getHistory</name></member>
      <member refid="classvlkx_1_1_common_pass_1ab40583b5b09c3ae7cc3e84fab1ad3f8f" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getInitialLayout</name></member>
      <member refid="classvlkx_1_1_common_pass_1ae1ddc45b5a13dcaeefb9fd90e1a01286" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getSubpassLayout</name></member>
      <member refid="classvlkx_1_1_common_pass_1a104cdcade852ddfc74291114405ba66f" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getUsage</name></member>
      <member refid="classvlkx_1_1_common_pass_1a44de9972c147e804118ca37681b7294c" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getVirtualFinal</name></member>
      <member refid="classvlkx_1_1_common_pass_1a9d60fbdc2f45846f581db953ec819ca6" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>getVirtualInitial</name></member>
      <member refid="classvlkx_1_1_common_pass_1aa01ec8a7f632c2cff2e895cba1381095" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>numPasses</name></member>
      <member refid="classvlkx_1_1_compute_pass_1aba8b60e042cfceac067f8537df1329a8" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>operator=</name></member>
      <member refid="classvlkx_1_1_common_pass_1a1a4f5ebf18a784a25dbbc466dd07d379" prot="public" virt="non-virtual" ambiguityscope="vlkx::CommonPass::"><scope>vlkx::ComputePass</scope><name>operator=</name></member>
      <member refid="classvlkx_1_1_common_pass_1afd8a13333e01d84ef27def5865537b57" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>update</name></member>
      <member refid="classvlkx_1_1_common_pass_1a25f432298ae391eb70749f70545e0210" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>usageHistory</name></member>
      <member refid="classvlkx_1_1_common_pass_1a14d528c3da5a00363d332c8c6f3752bc" prot="protected" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>validate</name></member>
      <member refid="classvlkx_1_1_compute_pass_1ab48a3f852b62138c0730d95e7e82045e" prot="public" virt="non-virtual"><scope>vlkx::ComputePass</scope><name>verify</name></member>
      <member refid="classvlkx_1_1_common_pass_1a2ec068fa399c81062e5127c0ea219776" prot="public" virt="virtual"><scope>vlkx::ComputePass</scope><name>~CommonPass</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
