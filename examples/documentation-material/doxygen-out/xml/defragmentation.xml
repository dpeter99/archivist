<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="defragmentation" kind="page">
    <compoundname>defragmentation</compoundname>
    <title>Defragmentation</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interleaved allocations and deallocations of many objects of varying size can cause fragmentation over time, which can lead to a situation where the library is unable to find a continuous range of free memory for a new allocation despite there is enough free space, just scattered across many small free ranges between existing allocations.</para>
<para>To mitigate this problem, you can use defragmentation feature. It doesn&apos;t happen automatically though and needs your cooperation, because VMA is a low level library that only allocates memory. It cannot recreate buffers and images in a new place as it doesn&apos;t remember the contents of `VkBufferCreateInfo` / `VkImageCreateInfo` structures. It cannot copy their contents as it doesn&apos;t record any commands to a command buffer.</para>
<para>Example:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="struct_vma_defragmentation_info" kindref="compound">VmaDefragmentationInfo</ref><sp/>defragInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">defragInfo.<ref refid="struct_vma_defragmentation_info_1a3302955190e6b5f0d8103698753de949" kindref="member">pool</ref><sp/>=<sp/>myPool;</highlight></codeline>
<codeline><highlight class="normal">defragInfo.<ref refid="struct_vma_defragmentation_info_1a3e23080c978ecf3abb3180f5b2069da7" kindref="member">flags</ref><sp/>=<sp/><ref refid="group__group__alloc_1gga6552a65b71d16f378c6994b3ceaef50ca2e6469bcf5a094776ceb5d118263f04b" kindref="member">VMA_DEFRAGMENTATION_FLAG_ALGORITHM_FAST_BIT</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_defragmentation_context" kindref="compound">VmaDefragmentationContext</ref><sp/>defragCtx;</highlight></codeline>
<codeline><highlight class="normal">VkResult<sp/>res<sp/>=<sp/><ref refid="group__group__alloc_1ga0cdd7b0b8653745fa95af9e78d919e70" kindref="member">vmaBeginDefragmentation</ref>(allocator,<sp/>&amp;defragInfo,<sp/>&amp;defragCtx);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>res...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vma_defragmentation_pass_move_info" kindref="compound">VmaDefragmentationPassMoveInfo</ref><sp/>pass;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="group__group__alloc_1gacbe4a77fdfa7ea29328d2f940d423ab7" kindref="member">vmaBeginDefragmentationPass</ref>(allocator,<sp/>defragCtx,<sp/>&amp;pass);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>==<sp/>VK_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>!=<sp/>VK_INCOMPLETE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>error...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pass.<ref refid="struct_vma_defragmentation_pass_move_info_1a1b3e18c23f9691f35baf183e615c4408" kindref="member">moveCount</ref>;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inspect<sp/>pass.pMoves[i].srcAllocation,<sp/>identify<sp/>what<sp/>buffer/image<sp/>it<sp/>represents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vma_allocation_info" kindref="compound">VmaAllocationInfo</ref><sp/>allocInfo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__alloc_1gab9c96ca6bb55ad9069829fe8355bbb79" kindref="member">vmaGetAllocationInfo</ref>(allocator,<sp/>pMoves[i].srcAllocation,<sp/>&amp;allocInfo);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyEngineResourceData*<sp/>resData<sp/>=<sp/>(MyEngineResourceData*)allocInfo.<ref refid="struct_vma_allocation_info_1ad0ea9d64dd733ffd7beff7af6d289ad0" kindref="member">pUserData</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recreate<sp/>and<sp/>bind<sp/>this<sp/>buffer/image<sp/>at:<sp/>pass.pMoves[i].dstMemory,<sp/>pass.pMoves[i].dstOffset.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageCreateInfo<sp/>imgCreateInfo<sp/>=<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImage<sp/>newImg;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>vkCreateImage(device,<sp/>&amp;imgCreateInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;newImg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>res...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="group__group__alloc_1ga3a5d8d9f2a29b42cf87f0f8dfef591f4" kindref="member">vmaBindImageMemory</ref>(allocator,<sp/>pMoves[i].dstTmpAllocation,<sp/>newImg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>res...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Issue<sp/>a<sp/>vkCmdCopyBuffer/vkCmdCopyImage<sp/>to<sp/>copy<sp/>its<sp/>content<sp/>to<sp/>the<sp/>new<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdCopyImage(cmdBuf,<sp/>resData-&gt;img,<sp/>...,<sp/>newImg,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>copy<sp/>commands<sp/>finished<sp/>executing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vkWaitForFences(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>old<sp/>buffers/images<sp/>bound<sp/>with<sp/>pass.pMoves[i].srcAllocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pass.<ref refid="struct_vma_defragmentation_pass_move_info_1a1b3e18c23f9691f35baf183e615c4408" kindref="member">moveCount</ref>;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImage(device,<sp/>resData-&gt;img,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>appropriate<sp/>descriptors<sp/>to<sp/>point<sp/>to<sp/>the<sp/>new<sp/>places...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass</ref>(allocator,<sp/>defragCtx,<sp/>&amp;pass);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>==<sp/>VK_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>!=<sp/>VK_INCOMPLETE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>error...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__alloc_1gae419e366d1c015716165bdfd5aafef6f" kindref="member">vmaEndDefragmentation</ref>(allocator,<sp/>defragCtx,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Although functions like <ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer()</ref>, <ref refid="group__group__alloc_1gaa76142ae43535c862ad9e194a6e38aaa" kindref="member">vmaCreateImage()</ref>, <ref refid="group__group__alloc_1gafcc45e5a6388ab35daa9a46688baee20" kindref="member">vmaDestroyBuffer()</ref>, <ref refid="group__group__alloc_1ga2f6367e612daace5c5ecd7ef9e47c3fd" kindref="member">vmaDestroyImage()</ref> create/destroy an allocation and a buffer/image at once, these are just a shortcut for creating the resource, allocating memory, and binding them together. Defragmentation works on memory allocations only. You must handle the rest manually. Defragmentation is an iterative process that should repreat &quot;passes&quot; as long as related functions return `VK_INCOMPLETE` not `VK_SUCCESS`. In each pass:</para>
<para>1. <ref refid="group__group__alloc_1gacbe4a77fdfa7ea29328d2f940d423ab7" kindref="member">vmaBeginDefragmentationPass()</ref> function call:<itemizedlist>
<listitem><para>Calculates and returns the list of allocations to be moved in this pass. Note this can be a time-consuming process.</para>
</listitem><listitem><para>Reserves destination memory for them by creating temporary destination allocations that you can query for their `VkDeviceMemory` + offset using <ref refid="group__group__alloc_1gab9c96ca6bb55ad9069829fe8355bbb79" kindref="member">vmaGetAllocationInfo()</ref>. 2. Inside the pass, **you should**:</para>
</listitem><listitem><para>Inspect the returned list of allocations to be moved.</para>
</listitem><listitem><para>Create new buffers/images and bind them at the returned destination temporary allocations.</para>
</listitem><listitem><para>Copy data from source to destination resources if necessary.</para>
</listitem><listitem><para>Destroy the source buffers/images, but NOT their allocations. 3. <ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref> function call:</para>
</listitem><listitem><para>Frees the source memory reserved for the allocations that are moved.</para>
</listitem><listitem><para>Modifies source <ref refid="struct_vma_allocation" kindref="compound">VmaAllocation</ref> objects that are moved to point to the destination reserved memory.</para>
</listitem><listitem><para>Frees `VkDeviceMemory` blocks that became empty.</para>
</listitem></itemizedlist>
</para>
<para>Unlike in previous iterations of the defragmentation API, there is no list of &quot;movable&quot; allocations passed as a parameter. Defragmentation algorithm tries to move all suitable allocations. You can, however, refuse to move some of them inside a defragmentation pass, by setting `pass.pMoves[i].operation` to <ref refid="group__group__alloc_1ggada9e3861caf96f08894b0bcc160ec257ad25bc6f816b226b4fd5170e845f218d2" kindref="member">VMA_DEFRAGMENTATION_MOVE_OPERATION_IGNORE</ref>. This is not recommended and may result in suboptimal packing of the allocations after defragmentation. If you cannot ensure any allocation can be moved, it is better to keep movable allocations separate in a custom pool.</para>
<para>Inside a pass, for each allocation that should be moved:</para>
<para><itemizedlist>
<listitem><para>You should copy its data from the source to the destination place by calling e.g. `vkCmdCopyBuffer()`, `vkCmdCopyImage()`.<itemizedlist>
<listitem><para>You need to make sure these commands finished executing before destroying the source buffers/images and before calling <ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>If a resource doesn&apos;t contain any meaningful data, e.g. it is a transient color attachment image to be cleared, filled, and used temporarily in each rendering frame, you can just recreate this image without copying its data.</para>
</listitem><listitem><para>If the resource is in `HOST_VISIBLE` and `HOST_CACHED` memory, you can copy its data on the CPU using `memcpy()`.</para>
</listitem><listitem><para>If you cannot move the allocation, you can set `pass.pMoves[i].operation` to <ref refid="group__group__alloc_1ggada9e3861caf96f08894b0bcc160ec257ad25bc6f816b226b4fd5170e845f218d2" kindref="member">VMA_DEFRAGMENTATION_MOVE_OPERATION_IGNORE</ref>. This will cancel the move.<itemizedlist>
<listitem><para><ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref> will then free the destination memory not the source memory of the allocation, leaving it unchanged.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>If you decide the allocation is unimportant and can be destroyed instead of moved (e.g. it wasn&apos;t used for long time), you can set `pass.pMoves[i].operation` to <ref refid="group__group__alloc_1ggada9e3861caf96f08894b0bcc160ec257a9786f8492a9be2c03bd26395e352ab85" kindref="member">VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY</ref>.<itemizedlist>
<listitem><para><ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref> will then free both source and destination memory, and will destroy the source <ref refid="struct_vma_allocation" kindref="compound">VmaAllocation</ref> object.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>You can defragment a specific custom pool by setting <ref refid="struct_vma_defragmentation_info_1a3302955190e6b5f0d8103698753de949" kindref="member">VmaDefragmentationInfo::pool</ref> (like in the example above) or all the default pools by setting this member to null.</para>
<para>Defragmentation is always performed in each pool separately. Allocations are never moved between different Vulkan memory types. The size of the destination memory reserved for a moved allocation is the same as the original one. Alignment of an allocation as it was determined using `vkGetBufferMemoryRequirements()` etc. is also respected after defragmentation. Buffers/images should be recreated with the same `VkBufferCreateInfo` / `VkImageCreateInfo` parameters as the original ones.</para>
<para>You can perform the defragmentation incrementally to limit the number of allocations and bytes to be moved in each pass, e.g. to call it in sync with render frames and not to experience too big hitches. See members: <ref refid="struct_vma_defragmentation_info_1a637ada77b02179a27fa92290000afac4" kindref="member">VmaDefragmentationInfo::maxBytesPerPass</ref>, <ref refid="struct_vma_defragmentation_info_1ac2db29d309bebc4f7d55041416e9694b" kindref="member">VmaDefragmentationInfo::maxAllocationsPerPass</ref>.</para>
<para>It is also safe to perform the defragmentation asynchronously to render frames and other Vulkan and VMA usage, possibly from multiple threads, with the exception that allocations returned in VmaDefragmentationPassMoveInfo::pMoves shouldn&apos;t be destroyed until the defragmentation pass is ended.</para>
<para><bold>Mapping</bold> is preserved on allocations that are moved during defragmentation. Whether through <ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597a11da372cc3a82931c5e5d6146cd9dd1f" kindref="member">VMA_ALLOCATION_CREATE_MAPPED_BIT</ref> or <ref refid="group__group__alloc_1ga13b93ec0ed38ad7232300cb94931c8d2" kindref="member">vmaMapMemory()</ref>, the allocations are mapped at their new place. Of course, pointer to the mapped data changes, so it needs to be queried using <ref refid="struct_vma_allocation_info_1a17a39eb34201a610347acb91b38eca79" kindref="member">VmaAllocationInfo::pMappedData</ref>.</para>
<para><simplesect kind="note"><para>Defragmentation is not supported in custom pools created with <ref refid="group__group__alloc_1gga9a7c45f9c863695d98c83fa5ac940fe7a13c8a444197c67866be9cb05599fc726" kindref="member">VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h"/>
  </compounddef>
</doxygen>
