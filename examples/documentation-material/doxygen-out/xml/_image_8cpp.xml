<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="_image_8cpp" kind="file" language="C++">
    <compoundname>Image.cpp</compoundname>
    <includes refid="_image_8h" local="yes">vlkx/vulkan/abstraction/Image.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">fstream</includes>
    <includes local="no">utility</includes>
    <includes refid="stb__image_8h" local="yes">stb_image.h</includes>
    <includes refid="_vulkan_module_8h" local="yes">vlkx/vulkan/VulkanModule.h</includes>
    <includes refid="_file_8h" local="yes">shadow/util/File.h</includes>
    <incdepgraph>
      <node id="32">
        <label>core/Module.h</label>
        <link refid="_module_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>exports.h</label>
        <link refid="exports_8h"/>
      </node>
      <node id="33">
        <label>SHObject.h</label>
        <link refid="_s_h_object_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>SwapChain.h</label>
        <link refid="_swap_chain_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vlkx/vulkan/Tools.h</label>
        <link refid="_tools_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vlkx/vulkan/ValidationAndExtension.h</label>
        <link refid="_validation_and_extension_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>VulkanDevice.h</label>
        <link refid="_vulkan_device_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>vlkx/vulkan/VulkanModule.h</label>
        <link refid="_vulkan_module_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Buffer.h</label>
        <link refid="_buffer_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>vlkx/vulkan/abstraction/Commands.h</label>
        <link refid="_commands_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vlkx/vulkan/abstraction/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ImageUsage.h</label>
        <link refid="_image_usage_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Queue.h</label>
        <link refid="_queue_8h"/>
      </node>
      <node id="7">
        <label>vulkan/vk_mem_alloc.h</label>
        <link refid="vk__mem__alloc_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>shadow-engine/shadow-renderer/src/vulkan/abstraction/Image.cpp</label>
        <link refid="_image_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>shadow/util/File.h</label>
        <link refid="_file_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>shadow/util/RefCounter.h</label>
        <link refid="_ref_counter_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>stb_image.h</label>
        <link refid="stb__image_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SDL.h</label>
      </node>
      <node id="35">
        <label>SDL_events.h</label>
      </node>
      <node id="31">
        <label>SDL_vulkan.h</label>
      </node>
      <node id="39">
        <label>algorithm</label>
      </node>
      <node id="23">
        <label>array</label>
      </node>
      <node id="25">
        <label>cmath</label>
      </node>
      <node id="26">
        <label>fstream</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="17">
        <label>map</label>
      </node>
      <node id="20">
        <label>memory</label>
      </node>
      <node id="16">
        <label>optional</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
      <node id="28">
        <label>stdio.h</label>
      </node>
      <node id="29">
        <label>stdlib.h</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="24">
        <label>utility</label>
      </node>
      <node id="22">
        <label>variant</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="6">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structvlkx_1_1_image_config" prot="public">vlkx::ImageConfig</innerclass>
    <innerclass refid="structvlkx_1_1_image_data" prot="public">vlkx::ImageData</innerclass>
    <innernamespace refid="namespacevlkx">vlkx</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_image_8cpp_1a18372412ad2fc3ce1e3240b3cf0efe78" prot="public" static="no">
        <name>STB_IMAGE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/src/vulkan/abstraction/Image.cpp" line="6" column="12" bodyfile="shadow-engine/shadow-renderer/src/vulkan/abstraction/Image.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_image_8h" kindref="compound">vlkx/vulkan/abstraction/Image.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stb__image_8h" kindref="compound">stb_image.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vulkan_module_8h" kindref="compound">vlkx/vulkan/VulkanModule.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_file_8h" kindref="compound">shadow/util/File.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevlkx" kindref="compound">vlkx</ref><sp/>{</highlight></codeline>
<codeline lineno="12" refid="structvlkx_1_1_image_config" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvlkx_1_1_image_config" kindref="compound">ImageConfig</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structvlkx_1_1_image_config" kindref="compound">ImageConfig</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readable)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvlkx_1_1_image_config_1a013cbd4e9acec1e0989572fe6114f9b8" kindref="member">tiling</ref><sp/>=<sp/>VK_IMAGE_TILING_LINEAR;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvlkx_1_1_image_config_1a1e2c7b370c61c5624c6173f140fff16d" kindref="member">layout</ref><sp/>=<sp/>VK_IMAGE_LAYOUT_PREINITIALIZED;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvlkx_1_1_image_config_1a013cbd4e9acec1e0989572fe6114f9b8" kindref="member">tiling</ref><sp/>=<sp/>VK_IMAGE_TILING_OPTIMAL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvlkx_1_1_image_config_1a1e2c7b370c61c5624c6173f140fff16d" kindref="member">layout</ref><sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvlkx_1_1_image_config_1a3fe17e0f0f28551942444c691fa9238b" kindref="member">mipping</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvlkx_1_1_image_config_1aec14fd9c251a4b6f0706721afa12fc96" kindref="member">layers</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkSampleCountFlagBits<sp/><ref refid="structvlkx_1_1_image_config_1ad0d6788815b650e830a209f8b6d97221" kindref="member">samples</ref><sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageTiling<sp/><ref refid="structvlkx_1_1_image_config_1a013cbd4e9acec1e0989572fe6114f9b8" kindref="member">tiling</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageLayout<sp/><ref refid="structvlkx_1_1_image_config_1a1e2c7b370c61c5624c6173f140fff16d" kindref="member">layout</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structvlkx_1_1_image_data" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvlkx_1_1_image_data" kindref="compound">ImageData</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvlkx_1_1_image_descriptor_1_1_dimension" kindref="compound">ImageDescriptor::Dimension</ref><sp/><ref refid="structvlkx_1_1_image_data_1ab426912a079f3a195a5bec952bedb1c8" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structvlkx_1_1_image_data_1a47c3668fdb9708c8e1a6f5649deeee2c" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvlkx_1_1_image_data" kindref="compound">ImageData</ref><sp/><ref refid="namespacevlkx_1a8540388de027d35bdf8e4d6342890b79" kindref="member">loadImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wantedChannels)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structshadowutil_1_1_file_data" kindref="compound">shadowutil::FileData</ref>*<sp/>data<sp/>=<sp/><ref refid="namespaceshadowutil_1a64f07a14b3bde183ce19dbf52a6749fe" kindref="member">shadowutil::loadFile</ref>(path);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height,<sp/>channels;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stb__image_8h_1a28eb51a1512ce382ee50f20e1d04d50d" kindref="member">stbi_uc</ref>*<sp/>stbData<sp/>=<sp/><ref refid="stb__image_8h_1a5bf9d78a27dc1cb216005798fb704bdf" kindref="member">stbi_load_from_memory</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="stb__image_8h_1a28eb51a1512ce382ee50f20e1d04d50d" kindref="member">stbi_uc</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data-&gt;<ref refid="structshadowutil_1_1_file_data_1a4c30e920a4c8a841b8dd5cd5b924834e" kindref="member">data</ref>.data()),<sp/>data-&gt;<ref refid="structshadowutil_1_1_file_data_1acc0f57992fad181fb53dbd5f3394616f" kindref="member">size</ref>,<sp/>&amp;width,<sp/>&amp;height,<sp/>&amp;channels,<sp/>wantedChannels);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbData<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>read<sp/>image<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(path));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(channels)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stb__image_8h_1ad3e11bb44412a7ba348acfbad09caacb" kindref="member">stbi_image_free</ref>(stbData);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbData<sp/>=<sp/><ref refid="stb__image_8h_1a5bf9d78a27dc1cb216005798fb704bdf" kindref="member">stbi_load_from_memory</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="stb__image_8h_1a28eb51a1512ce382ee50f20e1d04d50d" kindref="member">stbi_uc</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data-&gt;<ref refid="structshadowutil_1_1_file_data_1a4c30e920a4c8a841b8dd5cd5b924834e" kindref="member">data</ref>.data()),<sp/>data-&gt;<ref refid="structshadowutil_1_1_file_data_1acc0f57992fad181fb53dbd5f3394616f" kindref="member">size</ref>,<sp/>&amp;width,<sp/>&amp;height,<sp/>&amp;channels,<sp/><ref refid="stb__image_8h_1a06fc87d81c62e9abb8790b6e5713c55baa7b1af0c9f0310c3ada2aa29a32de293" kindref="member">STBI_rgb_alpha</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>load<sp/>image<sp/>with<sp/>unsupported<sp/>number<sp/>of<sp/>channels:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(channels));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(width),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(height),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(channels)<sp/>},</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stbData)<sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;VkFormat&gt;<sp/><ref refid="namespacevlkx_1a1b39c75e3a1b072a9836900786032787" kindref="member">findFormatWith</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkFormat&gt;&amp;<sp/>formats,<sp/>VkFormatFeatureFlags<sp/>feature)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>:<sp/>formats)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFormatProperties<sp/>props;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFormatProperties(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;physical,<sp/>format,<sp/>&amp;props);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((props.optimalTilingFeatures<sp/>&amp;<sp/>feature)<sp/>==<sp/>feature)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><ref refid="namespacevlkx_1a79b0b8b70a77c2f54b0e42eb2ee7516d" kindref="member">findFormatForChannels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ImageUsage&gt;&amp;<sp/>usages,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>highPrecision<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(channels)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFormat<sp/>best,<sp/>alternative;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highPrecision)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>VK_FORMAT_R16_SFLOAT;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alternative<sp/>=<sp/>VK_FORMAT_R16G16B16A16_SFLOAT;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>VK_FORMAT_R8_UNORM;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alternative<sp/>=<sp/>VK_FORMAT_R8G8B8A8_UNORM;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacevlkx_1a1b39c75e3a1b072a9836900786032787" kindref="member">findFormatWith</ref>({<sp/>best<sp/>},<sp/>VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT).has_value())</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alternative;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highPrecision)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_FORMAT_R16G16B16A16_SFLOAT;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_FORMAT_R8G8B8A8_UNORM;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>find<sp/>format<sp/>for<sp/>invalid<sp/>channels<sp/>(RGB<sp/>images<sp/>have<sp/>4<sp/>channels!)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><ref refid="namespacevlkx_1a958db039d21c9675888808273bafbcf2" kindref="member">findFormatForDepthStencil</ref>()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/><ref refid="namespacevlkx_1a1b39c75e3a1b072a9836900786032787" kindref="member">findFormatWith</ref>({<sp/>VK_FORMAT_D32_SFLOAT_S8_UINT,<sp/>VK_FORMAT_D24_UNORM_S8_UINT<sp/>},<sp/>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!format.has_value())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>find<sp/>a<sp/>format<sp/>for<sp/>a<sp/>depth<sp/>stencil<sp/>image.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format.value();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampleCountFlagBits<sp/><ref refid="namespacevlkx_1a52b895fbb821ce233cc675a40347eb54" kindref="member">getMaxSamples</ref>(VkSampleCountFlags<sp/>samples)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count<sp/>:<sp/>{<sp/>VK_SAMPLE_COUNT_64_BIT,<sp/>VK_SAMPLE_COUNT_32_BIT,<sp/>VK_SAMPLE_COUNT_16_BIT,<sp/>VK_SAMPLE_COUNT_8_BIT,<sp/>VK_SAMPLE_COUNT_4_BIT,<sp/>VK_SAMPLE_COUNT_2_BIT,<sp/>VK_SAMPLE_COUNT_1_BIT<sp/>})<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples<sp/>&amp;<sp/>count)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Multisampling<sp/>isn&apos;t<sp/>supported?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_buffer_1a055bf8f2da8b0c7084493579a2f27ccb" kindref="member">Buffer::Buffer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ImageDescriptor<sp/><ref refid="classvlkx_1_1_image_1a84cae485afc47224352f4a45d8c1d323" kindref="member">Image::loadCubeFromDisk</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>directory,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;std::string,<sp/>6&gt;<sp/>&amp;files,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flipY)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stb__image_8h_1ab89c177fc52f1bb2dc1c05e48129a0a4" kindref="member">stbi_set_flip_vertically_on_load</ref>(flipY);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstImage<sp/>=<sp/><ref refid="namespacevlkx_1a8540388de027d35bdf8e4d6342890b79" kindref="member">loadImage</ref>(directory<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>files[0],<sp/><ref refid="stb__image_8h_1a06fc87d81c62e9abb8790b6e5713c55ba0177ac2c5002f4f251bb766d41752029" kindref="member">STBI_default</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageDescriptor::Dimension&amp;<sp/>dim<sp/>=<sp/>firstImage.dimensions;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[dim.getSize()<sp/>*<sp/>6];<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Figure<sp/>out<sp/>how<sp/>to<sp/>make<sp/>this<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>firstImage.data,<sp/>dim.getSize());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>image<sp/>=<sp/><ref refid="namespacevlkx_1a8540388de027d35bdf8e4d6342890b79" kindref="member">loadImage</ref>(directory<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>files[1],<sp/><ref refid="stb__image_8h_1a06fc87d81c62e9abb8790b6e5713c55ba0177ac2c5002f4f251bb766d41752029" kindref="member">STBI_default</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(image.dimensions.width<sp/>==<sp/>dim.width<sp/>&amp;&amp;<sp/>image.dimensions.height<sp/>==<sp/>dim.height<sp/>&amp;&amp;<sp/>image.dimensions.channels<sp/>==<sp/>dim.channels))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Image<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>files[i]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>has<sp/>different<sp/>dimensions<sp/>from<sp/>the<sp/>first<sp/>image.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data<sp/>+<sp/>i<sp/>*<sp/>dim.getSize(),<sp/>image.data,<sp/>dim.getSize());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stb__image_8h_1ab89c177fc52f1bb2dc1c05e48129a0a4" kindref="member">stbi_set_flip_vertically_on_load</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/><ref refid="classvlkx_1_1_image_descriptor_1a6e183c614c5b0aa6ee0a1e37e414e0c8a29b142520cd0349c9f7375be4aa848c0" kindref="member">ImageDescriptor::Type::Cubemap</ref>,<sp/>firstImage.dimensions,<sp/>data<sp/>};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ImageDescriptor<sp/><ref refid="classvlkx_1_1_image_1ace0107e2305fa465e515452f3763cc42" kindref="member">Image::loadSingleFromDisk</ref>(std::string<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flipY)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stb__image_8h_1ab89c177fc52f1bb2dc1c05e48129a0a4" kindref="member">stbi_set_flip_vertically_on_load</ref>(flipY);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>image<sp/>=<sp/><ref refid="namespacevlkx_1a8540388de027d35bdf8e4d6342890b79" kindref="member">loadImage</ref>(std::move(path),<sp/><ref refid="stb__image_8h_1a06fc87d81c62e9abb8790b6e5713c55ba0177ac2c5002f4f251bb766d41752029" kindref="member">STBI_default</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stb__image_8h_1ab89c177fc52f1bb2dc1c05e48129a0a4" kindref="member">stbi_set_flip_vertically_on_load</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/><ref refid="classvlkx_1_1_image_descriptor_1a6e183c614c5b0aa6ee0a1e37e414e0c8a66ba162102bbf6ae31b522aec561735e" kindref="member">ImageDescriptor::Type::Single</ref>,<sp/>image.dimensions,<sp/>image.data<sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureImage::Meta<sp/><ref refid="namespacevlkx_1a2ff9b98198083579d0a6086ff5b21460" kindref="member">createTextureMeta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageDescriptor&amp;<sp/>image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ImageUsage&gt;&amp;<sp/>usages)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TextureImage::Meta<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.getData(),<sp/>usages,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1a79b0b8b70a77c2f54b0e42eb2ee7516d" kindref="member">findFormatForChannels</ref>(image.getChannels(),<sp/>usages),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.getWidth(),<sp/>image.getHeight(),<sp/>image.getChannels(),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_tools_1_1_managed_image" kindref="compound">VkTools::ManagedImage</ref><sp/><ref refid="namespacevlkx_1a5e870bdd3676a5f45a88d398c3fd6788" kindref="member">createImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageConfig&amp;<sp/>config,<sp/>VkImageCreateFlags<sp/>flags,<sp/>VkFormat<sp/>format,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent3D&amp;<sp/>extent,<sp/>VkImageUsageFlags<sp/>usage)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>device<sp/>=<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>graphicsQueue<sp/>=<sp/>(uint32_t)<sp/>device-&gt;<ref refid="class_vulkan_device_1ad1813c44f18ffdb4bb2b47ae0dfda837" kindref="member">getQueues</ref>().<ref refid="struct_queue_families_1af657ef9f0339098cb1aaa38c47b16a04" kindref="member">graphics</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageCreateInfo<sp/>info<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags,<sp/>VK_IMAGE_TYPE_2D,<sp/>format,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>config.mipping,<sp/>config.layers,<sp/>config.samples,<sp/>config.tiling,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage,<sp/>VK_SHARING_MODE_EXCLUSIVE,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>&amp;graphicsQueue,<sp/>config.layout</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>the<sp/>managed<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_tools_1_1_managed_image" kindref="compound">VkTools::ManagedImage</ref><sp/>image<sp/>{};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>image<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref><sp/>allocateInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocateInfo.<ref refid="struct_vma_allocation_create_info_1accb8b06b1f677d858cb9af20705fa910" kindref="member">usage</ref><sp/>=<sp/><ref refid="group__group__alloc_1ggaa5846affa1e9da3800e3e78fae2305ccac6b5dc1432d88647aa4cd456246eadf7" kindref="member">VMA_MEMORY_USAGE_GPU_ONLY</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>+<sp/>create<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__alloc_1gaa76142ae43535c862ad9e194a6e38aaa" kindref="member">vmaCreateImage</ref>(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getAllocator(),<sp/>&amp;info,<sp/>&amp;allocateInfo,<sp/>&amp;image.image,<sp/>&amp;image.allocation,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacevlkx_1afc48f0f920ad0208f0e183915ac6dc8d" kindref="member">waitForBarrier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkCommandBuffer&amp;<sp/>commands,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImageMemoryBarrier&amp;<sp/>barrier,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;VkPipelineStageFlags,<sp/>2&gt;&amp;<sp/>stages)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(commands,<sp/>stages[0],<sp/>stages[1],<sp/>0,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>1,<sp/>&amp;barrier);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacevlkx_1a3c1f3cd12d2240ab6712f4098d8467ac" kindref="member">transitionImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImage&amp;<sp/>image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageConfig&amp;<sp/>config,<sp/>VkImageAspectFlags<sp/>aspect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;VkImageLayout,<sp/>2&gt;&amp;<sp/>layouts,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;VkAccessFlags,<sp/>2&gt;&amp;<sp/>access,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;VkPipelineStageFlags,<sp/>2&gt;&amp;<sp/>stages)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_vk_tools_1a41960289749cf0bdb6da01f44aabaf77" kindref="member">VkTools::immediateExecute</ref>([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkCommandBuffer&amp;<sp/>commands)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1afc48f0f920ad0208f0e183915ac6dc8d" kindref="member">waitForBarrier</ref>(commands,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access[0],<sp/>access[1],</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layouts[0],<sp/>layouts[1],</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_QUEUE_FAMILY_IGNORED,<sp/>VK_QUEUE_FAMILY_IGNORED,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>aspect,<sp/>0,<sp/>config.mipping,<sp/>0,<sp/>config.layers<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>stages);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VkOffset3D<sp/><ref refid="namespacevlkx_1a0a05fa50c0139e53ae9dd04a57561472" kindref="member">convertExtent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D&amp;<sp/>extent)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VkOffset3D<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(extent.width),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(extent.height),<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VkExtent3D<sp/><ref refid="namespacevlkx_1afda8a2a9ff5905b53cc11b46a443cb52" kindref="member">expandExtent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D&amp;<sp/>extent)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VkExtent3D<sp/>{<sp/>extent.width,<sp/>extent.height,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkExtent2D&gt;<sp/><ref refid="namespacevlkx_1a7caad33af38679d1f56fcf7cd4ad6cb1" kindref="member">getExtentForMipmaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent3D&amp;<sp/>extent)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>largest<sp/>=<sp/>std::max(extent.width,<sp/>extent.height);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mipping<sp/>=<sp/>std::floor(std::log2(largest));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VkExtent2D&gt;<sp/>extents(mipping);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkExtent2D<sp/>imageExt<sp/>{<sp/>extent.width,<sp/>extent.height<sp/>};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>0;<sp/>level<sp/>&lt;<sp/>mipping;<sp/>++level)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageExt.width<sp/>=<sp/>imageExt.width<sp/>&gt;<sp/>1<sp/>?<sp/>imageExt.width<sp/>/<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageExt.height<sp/>=<sp/>imageExt.height<sp/>&gt;<sp/>1<sp/>?<sp/>imageExt.height<sp/>/<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents[level]<sp/>=<sp/>imageExt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extents;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacevlkx_1a44a080d4e3a2f24537b089f3334ce2b2" kindref="member">generateMipmaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImage&amp;<sp/>image,<sp/>VkFormat<sp/>format,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent3D&amp;<sp/>extent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkExtent2D&gt;&amp;<sp/>mipExtents)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFormatProperties<sp/>props;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFormatProperties(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;physical,<sp/>format,<sp/>&amp;props);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(props.optimalTilingFeatures<sp/>&amp;<sp/>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT))</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>create<sp/>Mipmaps<sp/>for<sp/>an<sp/>image<sp/>format<sp/>that<sp/>does<sp/>not<sp/>support<sp/>blitting&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>destLevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkExtent2D<sp/>previousExt<sp/>{<sp/>extent.width,<sp/>extent.height<sp/>};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_vk_tools_1a41960289749cf0bdb6da01f44aabaf77" kindref="member">VkTools::immediateExecute</ref>([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkCommandBuffer&amp;<sp/>commands)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blit<sp/>the<sp/>new<sp/>images<sp/>into<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ext<sp/>:<sp/>mipExtents)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>sourceLevel<sp/>=<sp/>destLevel<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageMemoryBarrier<sp/>barrier<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>VK_ACCESS_TRANSFER_WRITE_BIT,<sp/>VK_ACCESS_TRANSFER_READ_BIT,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>image,<sp/>{<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>sourceLevel,<sp/>1,<sp/>0,<sp/>1<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1afc48f0f920ad0208f0e183915ac6dc8d" kindref="member">waitForBarrier</ref>(commands,<sp/>barrier,<sp/>{VK_PIPELINE_STAGE_TRANSFER_BIT,<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT});</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImageBlit<sp/>blit<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>sourceLevel,<sp/>0,<sp/>1},</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>0,<sp/>0},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1a0a05fa50c0139e53ae9dd04a57561472" kindref="member">convertExtent</ref>(previousExt)},</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>destLevel,<sp/><sp/><sp/>0,<sp/>1},</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>0,<sp/>0},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1a0a05fa50c0139e53ae9dd04a57561472" kindref="member">convertExtent</ref>(ext)}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBlitImage(commands,<sp/>image,<sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,<sp/>image,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>1,<sp/>&amp;blit,<sp/>VK_FILTER_LINEAR);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++destLevel;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousExt<sp/>=<sp/>ext;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_vk_tools_1a41960289749cf0bdb6da01f44aabaf77" kindref="member">VkTools::immediateExecute</ref>([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkCommandBuffer&amp;<sp/>commands)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>all<sp/>images<sp/>to<sp/>shader<sp/>read<sp/>only<sp/>so<sp/>we<sp/>can<sp/>sample<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>level<sp/>=<sp/>0;<sp/>level<sp/>&lt;<sp/>mipExtents.size()<sp/>+<sp/>1;<sp/>++level)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageMemoryBarrier<sp/>barrier<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>VK_ACCESS_TRANSFER_WRITE_BIT,<sp/>VK_ACCESS_TRANSFER_READ_BIT,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>==<sp/>mipExtents.size()<sp/>?<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL<sp/>:<sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>image,<sp/>{<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>level,<sp/>1,<sp/>0,<sp/>1<sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1afc48f0f920ad0208f0e183915ac6dc8d" kindref="member">waitForBarrier</ref>(commands,<sp/>barrier,<sp/>{<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT<sp/>});</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_image_1a86105309cd906795ab8f49b565bc5cd5" kindref="member">Image::Image</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;ext,<sp/>VkFormat<sp/>form)<sp/>:<sp/>extent(ext),<sp/>format(form)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvlkx_1_1_image_staging_buffer_1a0c6f5888796d7817a6e21bd92e7290df" kindref="member">ImageStagingBuffer::copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImage<sp/>&amp;target,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent3D<sp/>&amp;extent,<sp/>uint32_t<sp/>layers)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_vk_tools_1a41960289749cf0bdb6da01f44aabaf77" kindref="member">VkTools::immediateExecute</ref>([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkCommandBuffer&amp;<sp/>commands)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkBufferImageCopy<sp/>copyData<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>0,<sp/>layers<sp/>},<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/>extent<sp/>};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdCopyBufferToImage(commands,<sp/><ref refid="classvlkx_1_1_data_buffer_1a9e10436c90954e0f4e213af704e10707" kindref="member">getBuffer</ref>(),<sp/>target,<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>1,<sp/>&amp;copyData);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>());</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_image_sampler_1ab31b23ae9d70c44a49ecc447c636c3d7" kindref="member">ImageSampler::ImageSampler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mipLevels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvlkx_1_1_image_sampler_1_1_config" kindref="compound">vlkx::ImageSampler::Config</ref><sp/>&amp;config)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>sampler(<ref refid="namespace_vk_tools" kindref="compound">VkTools</ref>::<ref refid="namespace_vk_tools_1a01591839c97bb49c4c9fc43b78eea78f" kindref="member">createSampler</ref>(config.<ref refid="namespace_catch_1_1_generators_1a4df89be8072a9685ee89b6776a54bb93" kindref="member">filter</ref>,<sp/>config.mode,<sp/>mipLevels,<sp/><ref refid="class_vulkan_module" kindref="compound">VulkanModule</ref>::getInstance()-&gt;getDevice()-&gt;logical))<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer::BulkCopyMeta<sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta_1adf0bf111bf896c7377fbac55b55edccc" kindref="member">TextureImage::Meta::getCopyMeta</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkDeviceSize<sp/>singleSize<sp/>=<sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta_1af712a22c3366024952417043582e6d5b" kindref="member">width</ref><sp/>*<sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta_1a21151ea5a87618cf6edc0bf8e02da1ec" kindref="member">height</ref><sp/>*<sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta_1a5d40e9e31aac47d346a546545cea0be0" kindref="member">channels</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkDeviceSize<sp/>totalSize<sp/>=<sp/>singleSize<sp/>*<sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>.size();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Buffer::CopyMeta&gt;<sp/>copy(<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>making<sp/>a<sp/>framebuffer,<sp/>we<sp/>have<sp/>no<sp/>data<sp/>to<sp/>copy<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>[0]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>totalSize,<sp/>{}<sp/>};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>copy.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy[i]<sp/>=<sp/>{<sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>[i],<sp/>singleSize,<sp/>singleSize<sp/>*<sp/>i<sp/>};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>totalSize,<sp/>std::move(copy)<sp/>};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_texture_image_1a2b0f26622825b54180cf1fe8b2c52728" kindref="member">TextureImage::TextureImage</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mipmapping,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageSampler::Config<sp/>&amp;samplerConfig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta" kindref="compound">vlkx::TextureImage::Meta</ref><sp/>&amp;meta)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvlkx_1_1_image_1a86105309cd906795ab8f49b565bc5cd5" kindref="member">Image</ref>(meta.<ref refid="classvlkx_1_1_image_1aa6692fe8203c2f1f886b6442849c1d20" kindref="member">getExtent</ref>(),<sp/>meta.<ref refid="classvlkx_1_1_image_1a99d4d8aea8bc079e8f6100d781c491fb" kindref="member">format</ref>),<sp/>buffer(mipmapping,<sp/>meta),<sp/>sampler(buffer.getMipping(),<sp/>samplerConfig)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setView(<ref refid="namespace_vk_tools_1aa0fd9328ea74f6134b4726e48fcc038a" kindref="member">VkTools::createImageView</ref>(buffer.getImage(),<sp/>format,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>buffer.getMipping(),<sp/>meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>.size(),<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>()-&gt;<ref refid="class_vulkan_device_1a7ae557d71031d0212e50beba8b976d4b" kindref="member">logical</ref>));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_texture_image_1a2b0f26622825b54180cf1fe8b2c52728" kindref="member">TextureImage::TextureImage</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mipmapping,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageDescriptor<sp/>&amp;image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ImageUsage&gt;&amp;<sp/>usages,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageSampler::Config<sp/>&amp;config)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>TextureImage(mipmapping,<sp/>config,<sp/><ref refid="namespacevlkx_1a2ff9b98198083579d0a6086ff5b21460" kindref="member">createTextureMeta</ref>(image,<sp/>usages))</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureImage::TextureBuffer::TextureBuffer(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mipmaps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvlkx_1_1_texture_image_1_1_meta" kindref="compound">vlkx::TextureImage::Meta</ref><sp/>&amp;meta)<sp/>:<sp/>ImageBuffer()<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent3D<sp/>extent<sp/>=<sp/><ref refid="namespacevlkx_1afda8a2a9ff5905b53cc11b46a443cb52" kindref="member">expandExtent</ref>(meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1ace31206b2ef7302e4ef091270b88a5d0" kindref="member">getExtent</ref>());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layers<sp/>=<sp/>meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>.size();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layers<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>layers<sp/>!=<sp/>6)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>allocate<sp/>a<sp/>texture<sp/>buffer<sp/>for<sp/>an<sp/>invalid<sp/>number<sp/>of<sp/>textures;<sp/>only<sp/>single<sp/>textures<sp/>and<sp/>cubemap<sp/>textures<sp/>are<sp/>supported.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageConfig<sp/>config;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.layers<sp/>=<sp/>meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aabc1464055a33b71518ef684785d1379" kindref="member">data</ref>.size();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VkExtent2D&gt;<sp/>mipExtents;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mipmaps)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mipExtents<sp/>=<sp/><ref refid="namespacevlkx_1a7caad33af38679d1f56fcf7cd4ad6cb1" kindref="member">getExtentForMipmaps</ref>(extent);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mipLevels<sp/>=<sp/>mipExtents.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.mipping<sp/>=<sp/>mipLevels;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageCreateFlags<sp/>createFlags<sp/>{};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layers<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createFlags<sp/>|=<sp/>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>usage<sp/>=<sp/><ref refid="classvlkx_1_1_image_usage_1a1c89f1e246e377edf8a19db083135629" kindref="member">ImageUsage::getFlagsForUsage</ref>(meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1ac1707a6895a6af2ed92658cb2e46a665" kindref="member">usages</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage<sp/>|=<sp/>VK_IMAGE_USAGE_SAMPLED_BIT;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage<sp/>|=<sp/>VK_IMAGE_USAGE_TRANSFER_DST_BIT;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mipmaps)<sp/>usage<sp/>|=<sp/>VK_IMAGE_USAGE_TRANSFER_SRC_BIT;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setImage(<ref refid="namespacevlkx_1a5e870bdd3676a5f45a88d398c3fd6788" kindref="member">createImage</ref>(config,<sp/>createFlags,<sp/>meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aa4fb9980c820ee39880283470d6878b0" kindref="member">format</ref>,<sp/>extent,<sp/>usage));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1a3c1f3cd12d2240ab6712f4098d8467ac" kindref="member">transitionImage</ref>(getImage(),<sp/>config,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>{<sp/>VK_IMAGE_LAYOUT_UNDEFINED,<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL<sp/>},<sp/><sp/>{<sp/>0,<sp/>VK_ACCESS_TRANSFER_WRITE_BIT<sp/>},<sp/>{<sp/>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT<sp/>});</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageStagingBuffer<sp/>staging(meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1adf0bf111bf896c7377fbac55b55edccc" kindref="member">getCopyMeta</ref>());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staging.copy(getImage(),<sp/>extent,<sp/>config.layers);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mipmaps)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1a44a080d4e3a2f24537b089f3334ce2b2" kindref="member">generateMipmaps</ref>(getImage(),<sp/>meta.<ref refid="structvlkx_1_1_texture_image_1_1_meta_1aa4fb9980c820ee39880283470d6878b0" kindref="member">format</ref>,<sp/>extent,<sp/>mipExtents);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevlkx_1a3c1f3cd12d2240ab6712f4098d8467ac" kindref="member">transitionImage</ref>(getImage(),<sp/>config,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>{<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL<sp/>},<sp/>{<sp/>VK_ACCESS_TRANSFER_WRITE_BIT,<sp/>VK_ACCESS_SHADER_READ_BIT<sp/>},<sp/>{<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,<sp/>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT<sp/>});</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>RefCountedTexture::ReferenceCounter<sp/>RefCountedTexture::get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvlkx_1_1_ref_counted_texture_1abe22da373d7c7755a32c7339f99800ab" kindref="member">vlkx::RefCountedTexture::ImageLocation</ref><sp/>&amp;location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ImageUsage&gt;&amp;<sp/>usages,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageSampler::Config<sp/>&amp;config)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mips;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>ident;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;ImageDescriptor&gt;<sp/>image;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>singleTex<sp/>=<sp/>std::get_if&lt;std::string&gt;(&amp;location);<sp/>singleTex<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mips<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ident<sp/>=<sp/>singleTex;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>std::make_unique&lt;ImageDescriptor&gt;(<ref refid="classvlkx_1_1_image_1ace0107e2305fa465e515452f3763cc42" kindref="member">Image::loadSingleFromDisk</ref>(*singleTex,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>cubeTex<sp/>=<sp/>std::get_if&lt;CubemapLocation&gt;(&amp;location);<sp/>cubeTex<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mips<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ident<sp/>=<sp/>&amp;cubeTex-&gt;directory;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>std::make_unique&lt;ImageDescriptor&gt;(<ref refid="classvlkx_1_1_image_1a84cae485afc47224352f4a45d8c1d323" kindref="member">Image::loadCubeFromDisk</ref>(cubeTex-&gt;directory,<sp/>cubeTex-&gt;files,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshadowutil_1_1_ref_counter_1ad9009315a68caf1b753e8746a4ebbfee" kindref="member">ReferenceCounter::get</ref>(*ident,<sp/>mips,<sp/>config,<sp/><ref refid="namespacevlkx_1a2ff9b98198083579d0a6086ff5b21460" kindref="member">createTextureMeta</ref>(*image,<sp/>usages));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_depth_stencil_image_1a2238077741430cd7b5b1d746bbfa83c5" kindref="member">DepthStencilImage::DepthStencilImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;extent)<sp/>:<sp/>Image(extent,<sp/><ref refid="namespacevlkx_1a958db039d21c9675888808273bafbcf2" kindref="member">findFormatForDepthStencil</ref>()),<sp/>buffer(extent,<sp/>format)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setView(<ref refid="namespace_vk_tools_1aa0fd9328ea74f6134b4726e48fcc038a" kindref="member">VkTools::createImageView</ref>(getImage(),<sp/>format,<sp/>VK_IMAGE_ASPECT_DEPTH_BIT<sp/>|<sp/>VK_IMAGE_ASPECT_STENCIL_BIT,<sp/>1,<sp/>1,<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;logical));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>DepthStencilImage::DepthStencilBuffer::DepthStencilBuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;extent,<sp/>VkFormat<sp/>format)<sp/>:<sp/>ImageBuffer()<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setImage(<ref refid="namespacevlkx_1a5e870bdd3676a5f45a88d398c3fd6788" kindref="member">createImage</ref>(ImageConfig<sp/>{},<sp/>0,<sp/>format,<sp/><ref refid="namespacevlkx_1afda8a2a9ff5905b53cc11b46a443cb52" kindref="member">expandExtent</ref>(extent),<sp/>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvlkx_1_1_swapchain_image_1aa7d9b73807945014b6620b55aef6e75f" kindref="member">SwapchainImage::SwapchainImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImage<sp/>&amp;image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;extent,<sp/>VkFormat<sp/>format)<sp/>:<sp/>Image(extent,<sp/>format),<sp/>image(image)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setView(<ref refid="namespace_vk_tools_1aa0fd9328ea74f6134b4726e48fcc038a" kindref="member">VkTools::createImageView</ref>(image,<sp/>format,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>1,<sp/>1,<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;logical));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>managed<sp/>=<sp/>{<sp/>image,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Image&gt;<sp/><ref refid="classvlkx_1_1_multisample_image_1ab32ee609ec5423f57ec86c6721b06913" kindref="member">MultisampleImage::createColor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvlkx_1_1_image" kindref="compound">vlkx::Image</ref><sp/>&amp;targetImage,<sp/><ref refid="classvlkx_1_1_multisample_image_1a9b2c3f2efa1f49fd9712795b62ded862" kindref="member">vlkx::MultisampleImage::Mode</ref><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Image&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultisampleImage(targetImage.<ref refid="classvlkx_1_1_image_1aa6692fe8203c2f1f886b6442849c1d20" kindref="member">getExtent</ref>(),<sp/>targetImage.<ref refid="classvlkx_1_1_image_1ac9068c38b75bbc202a4613957cbc2b07" kindref="member">getFormat</ref>(),<sp/>mode,<sp/>MultisampleBuffer::Type::Color));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Image&gt;<sp/><ref refid="classvlkx_1_1_multisample_image_1adc90ba9237ecaca67b5179766e1b3972" kindref="member">MultisampleImage::createDepthStencilMS</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;extent,<sp/><ref refid="classvlkx_1_1_multisample_image_1a9b2c3f2efa1f49fd9712795b62ded862" kindref="member">vlkx::MultisampleImage::Mode</ref><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Image&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultisampleImage(<ref refid="classvlkx_1_1_image_1af8b5b8edcc1c31e433636f8df7a8cd65" kindref="member">extent</ref>,<sp/><ref refid="namespacevlkx_1a958db039d21c9675888808273bafbcf2" kindref="member">findFormatForDepthStencil</ref>(),<sp/>mode,<sp/>MultisampleBuffer::Type::DepthStencil));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Image&gt;<sp/><ref refid="classvlkx_1_1_multisample_image_1a7b981961ac602c9c4e81d2a49f84e3f1" kindref="member">MultisampleImage::createDepthStencil</ref>(VkExtent2D<sp/>&amp;extent,<sp/>std::optional&lt;Mode&gt;<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode.has_value())</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvlkx_1_1_multisample_image_1adc90ba9237ecaca67b5179766e1b3972" kindref="member">createDepthStencilMS</ref>(<ref refid="classvlkx_1_1_image_1af8b5b8edcc1c31e433636f8df7a8cd65" kindref="member">extent</ref>,<sp/>mode.value());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;DepthStencilImage&gt;(<ref refid="classvlkx_1_1_image_1af8b5b8edcc1c31e433636f8df7a8cd65" kindref="member">extent</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>MultisampleImage::MultisampleImage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;extent,<sp/>VkFormat<sp/>format,<sp/><ref refid="classvlkx_1_1_multisample_image_1a9b2c3f2efa1f49fd9712795b62ded862" kindref="member">vlkx::MultisampleImage::Mode</ref><sp/>mode,MultisampleBuffer::Type<sp/>type)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Image(extent,<sp/>format),<sp/>samples(chooseSamples(mode)),<sp/>buffer(type,<sp/>extent,<sp/>format,<sp/>samples)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageAspectFlags<sp/>aspect;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultisampleBuffer::Type::Color:<sp/>aspect<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultisampleBuffer::Type::DepthStencil:<sp/>aspect<sp/>=<sp/>VK_IMAGE_ASPECT_DEPTH_BIT<sp/>|<sp/>VK_IMAGE_ASPECT_STENCIL_BIT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setView(<ref refid="namespace_vk_tools_1aa0fd9328ea74f6134b4726e48fcc038a" kindref="member">VkTools::createImageView</ref>(buffer.getImage(),<sp/>format,<sp/>aspect,<sp/>1,<sp/>1,<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>()-&gt;<ref refid="class_vulkan_device_1a7ae557d71031d0212e50beba8b976d4b" kindref="member">logical</ref>));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampleCountFlagBits<sp/>MultisampleImage::chooseSamples(<ref refid="classvlkx_1_1_multisample_image_1a9b2c3f2efa1f49fd9712795b62ded862" kindref="member">vlkx::MultisampleImage::Mode</ref><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkPhysicalDeviceLimits<sp/>limits;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkPhysicalDeviceProperties<sp/>props;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceProperties(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;physical,<sp/>&amp;props);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limits<sp/>=<sp/>props.limits;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkSampleCountFlags<sp/>sampleFlags<sp/>=<sp/>std::min({<sp/>limits.framebufferColorSampleCounts,<sp/>limits.framebufferDepthSampleCounts,<sp/>limits.framebufferStencilSampleCounts<sp/>});</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkSampleCountFlagBits<sp/>maxSamples<sp/>=<sp/><ref refid="namespacevlkx_1a52b895fbb821ce233cc675a40347eb54" kindref="member">getMaxSamples</ref>(sampleFlags);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classvlkx_1_1_multisample_image_1a9b2c3f2efa1f49fd9712795b62ded862a6a359aa1c4e1153f6ea99d91e841e3d7" kindref="member">Mode::MostEfficient</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::min(VK_SAMPLE_COUNT_4_BIT,<sp/>maxSamples);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classvlkx_1_1_multisample_image_1a9b2c3f2efa1f49fd9712795b62ded862a582996407922dab08d5cf2b3d2a7c1c9" kindref="member">Mode::Highest</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxSamples;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>MultisampleImage::MultisampleBuffer::MultisampleBuffer(vlkx::MultisampleImage::MultisampleBuffer::Type<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D<sp/>&amp;extent,<sp/>VkFormat<sp/>format,<sp/>VkSampleCountFlagBits<sp/>samples)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ImageBuffer()<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageUsageFlags<sp/>usageFlags;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Type::Color:<sp/>usageFlags<sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT<sp/>|<sp/>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Type::DepthStencil:<sp/>usageFlags<sp/>=<sp/>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageConfig<sp/>config;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.samples<sp/>=<sp/>samples;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setImage(<ref refid="namespacevlkx_1a5e870bdd3676a5f45a88d398c3fd6788" kindref="member">createImage</ref>(config,<sp/>0,<sp/>format,<sp/><ref refid="namespacevlkx_1afda8a2a9ff5905b53cc11b46a443cb52" kindref="member">expandExtent</ref>(extent),<sp/>usageFlags));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="shadow-engine/shadow-renderer/src/vulkan/abstraction/Image.cpp"/>
  </compounddef>
</doxygen>
