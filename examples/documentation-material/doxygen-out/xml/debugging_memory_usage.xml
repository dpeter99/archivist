<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="debugging_memory_usage" kind="page">
    <compoundname>debugging_memory_usage</compoundname>
    <title>Debugging incorrect memory usage</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>If you suspect a bug with memory usage, like usage of uninitialized memory or memory being overwritten out of bounds of an allocation, you can use debug features of this library to verify this.</para>
<sect1 id="debugging_memory_usage_1debugging_memory_usage_initialization">
<title>Memory initialization</title>
<para>If you experience a bug with incorrect and nondeterministic data in your program and you suspect uninitialized memory to be used, you can enable automatic memory initialization to verify this. To do it, define macro `VMA_DEBUG_INITIALIZE_ALLOCATIONS` to 1.</para>
<para><programlisting><codeline><highlight class="preprocessor">#define<sp/>VMA_DEBUG_INITIALIZE_ALLOCATIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vk__mem__alloc_8h" kindref="compound">vk_mem_alloc.h</ref>&quot;</highlight></codeline>
</programlisting></para>
<para>It makes memory of all new allocations initialized to bit pattern `0xDCDCDCDC`. Before an allocation is destroyed, its memory is filled with bit pattern `0xEFEFEFEF`. Memory is automatically mapped and unmapped if necessary.</para>
<para>If you find these values while debugging your program, good chances are that you incorrectly read Vulkan memory that is allocated but not initialized, or already freed, respectively.</para>
<para>Memory initialization works only with memory types that are `HOST_VISIBLE`. It works also with dedicated allocations.</para>
</sect1>
<sect1 id="debugging_memory_usage_1debugging_memory_usage_margins">
<title>Margins</title>
<para>By default, allocations are laid out in memory blocks next to each other if possible (considering required alignment, `bufferImageGranularity`, and `nonCoherentAtomSize`).</para>
<para>![Allocations without margin](../gfx/Margins_1.png)</para>
<para>Define macro `VMA_DEBUG_MARGIN` to some non-zero value (e.g. 16) to enforce specified number of bytes as a margin after every allocation.</para>
<para><programlisting><codeline><highlight class="preprocessor">#define<sp/>VMA_DEBUG_MARGIN<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vk__mem__alloc_8h" kindref="compound">vk_mem_alloc.h</ref>&quot;</highlight></codeline>
</programlisting></para>
<para>![Allocations with margin](../gfx/Margins_2.png)</para>
<para>If your bug goes away after enabling margins, it means it may be caused by memory being overwritten outside of allocation boundaries. It is not 100% certain though. Change in application behavior may also be caused by different order and distribution of allocations across memory blocks after margins are applied.</para>
<para>Margins work with all types of memory.</para>
<para>Margin is applied only to allocations made out of memory blocks and not to dedicated allocations, which have their own memory block of specific size. It is thus not applied to allocations made using <ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597a3fc311d855c2ff53f1090ef5c722b38f" kindref="member">VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT</ref> flag or those automatically decided to put into dedicated allocations, e.g. due to its large size or recommended by VK_KHR_dedicated_allocation extension.</para>
<para>Margins appear in [JSON dump](<ref refid="statistics_1statistics_json_dump" kindref="member">JSON dump</ref>) as part of free space.</para>
<para>Note that enabling margins increases memory usage and fragmentation.</para>
<para>Margins do not apply to <ref refid="virtual_allocator" kindref="compound">Virtual allocator</ref>.</para>
</sect1>
<sect1 id="debugging_memory_usage_1debugging_memory_usage_corruption_detection">
<title>Corruption detection</title>
<para>You can additionally define macro `VMA_DEBUG_DETECT_CORRUPTION` to 1 to enable validation of contents of the margins.</para>
<para><programlisting><codeline><highlight class="preprocessor">#define<sp/>VMA_DEBUG_MARGIN<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VMA_DEBUG_DETECT_CORRUPTION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vk__mem__alloc_8h" kindref="compound">vk_mem_alloc.h</ref>&quot;</highlight></codeline>
</programlisting></para>
<para>When this feature is enabled, number of bytes specified as `VMA_DEBUG_MARGIN` (it must be multiply of 4) after every allocation is filled with a magic number. This idea is also know as &quot;canary&quot;. Memory is automatically mapped and unmapped if necessary.</para>
<para>This number is validated automatically when the allocation is destroyed. If it is not equal to the expected value, `VMA_ASSERT()` is executed. It clearly means that either CPU or GPU overwritten the memory outside of boundaries of the allocation, which indicates a serious bug.</para>
<para>You can also explicitly request checking margins of all allocations in all memory blocks that belong to specified memory types by using function <ref refid="group__group__alloc_1ga0baa58dd12991e7b0fe42dcdf22bb100" kindref="member">vmaCheckCorruption()</ref>, or in memory blocks that belong to specified custom pool, by using function <ref refid="group__group__alloc_1ga19e2e174d6acb8abfdeb8c200517a468" kindref="member">vmaCheckPoolCorruption()</ref>.</para>
<para>Margin validation (corruption detection) works only for memory types that are `HOST_VISIBLE` and `HOST_COHERENT`. </para>
</sect1>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h"/>
  </compounddef>
</doxygen>
