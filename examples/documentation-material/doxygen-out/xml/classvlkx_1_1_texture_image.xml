<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classvlkx_1_1_texture_image" kind="class" language="C++" prot="public">
    <compoundname>vlkx::TextureImage</compoundname>
    <basecompoundref refid="classvlkx_1_1_image" prot="public" virt="non-virtual">vlkx::Image</basecompoundref>
    <basecompoundref refid="classvlkx_1_1_samplable_image" prot="public" virt="non-virtual">vlkx::SamplableImage</basecompoundref>
    <includes refid="_image_8h" local="no">Image.h</includes>
    <innerclass refid="structvlkx_1_1_texture_image_1_1_meta" prot="public">vlkx::TextureImage::Meta</innerclass>
    <innerclass refid="classvlkx_1_1_texture_image_1_1_texture_buffer" prot="private">vlkx::TextureImage::TextureBuffer</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvlkx_1_1_texture_image_1ae8d2d0207567df6a9868b12f113bad15" prot="private" static="no" mutable="no">
        <type>const TextureBuffer</type>
        <definition>const TextureBuffer vlkx::TextureImage::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <qualifiedname>vlkx::TextureImage::buffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="220" column="29" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvlkx_1_1_texture_image_1a603535342c05b742babef114d1e6a49b" prot="private" static="no" mutable="no">
        <type>const <ref refid="classvlkx_1_1_image_sampler" kindref="compound">ImageSampler</ref></type>
        <definition>const ImageSampler vlkx::TextureImage::sampler</definition>
        <argsstring></argsstring>
        <name>sampler</name>
        <qualifiedname>vlkx::TextureImage::sampler</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="221" column="28" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a2b0f26622825b54180cf1fe8b2c52728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vlkx::TextureImage::TextureImage</definition>
        <argsstring>(bool mipmapping, const ImageSampler::Config &amp;samplerConfig, const Meta &amp;meta)</argsstring>
        <name>TextureImage</name>
        <qualifiedname>vlkx::TextureImage::TextureImage</qualifiedname>
        <param>
          <type>bool</type>
          <declname>mipmapping</declname>
        </param>
        <param>
          <type>const <ref refid="structvlkx_1_1_image_sampler_1_1_config" kindref="compound">ImageSampler::Config</ref> &amp;</type>
          <declname>samplerConfig</declname>
        </param>
        <param>
          <type>const <ref refid="structvlkx_1_1_texture_image_1_1_meta" kindref="compound">Meta</ref> &amp;</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="191" column="9" bodyfile="shadow-engine/shadow-renderer/src/vulkan/abstraction/Image.cpp" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1ae36f75479a9b8f80b39202d82303ef27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vlkx::TextureImage::TextureImage</definition>
        <argsstring>(bool mipmapping, const ImageDescriptor &amp;image, const std::vector&lt; ImageUsage &gt; &amp;usages, const ImageSampler::Config &amp;config)</argsstring>
        <name>TextureImage</name>
        <qualifiedname>vlkx::TextureImage::TextureImage</qualifiedname>
        <param>
          <type>bool</type>
          <declname>mipmapping</declname>
        </param>
        <param>
          <type>const <ref refid="classvlkx_1_1_image_descriptor" kindref="compound">ImageDescriptor</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classvlkx_1_1_image_usage" kindref="compound">ImageUsage</ref> &gt; &amp;</type>
          <declname>usages</declname>
        </param>
        <param>
          <type>const <ref refid="structvlkx_1_1_image_sampler_1_1_config" kindref="compound">ImageSampler::Config</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="192" column="9" bodyfile="shadow-engine/shadow-renderer/src/vulkan/abstraction/Image.cpp" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a5d680edd9e1cb6e84927809f463f760c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vlkx::TextureImage::TextureImage</definition>
        <argsstring>(const TextureImage &amp;)=delete</argsstring>
        <name>TextureImage</name>
        <qualifiedname>vlkx::TextureImage::TextureImage</qualifiedname>
        <param>
          <type>const <ref refid="classvlkx_1_1_texture_image" kindref="compound">TextureImage</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="194" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a3ea418a21c7abc5371592567091eb939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvlkx_1_1_texture_image" kindref="compound">TextureImage</ref> &amp;</type>
        <definition>TextureImage &amp; vlkx::TextureImage::operator=</definition>
        <argsstring>(const TextureImage &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>vlkx::TextureImage::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classvlkx_1_1_texture_image" kindref="compound">TextureImage</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="195" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a70071b1b5b50374cce613aa39f187d41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="struct_vk_tools_1_1_managed_image" kindref="compound">VkTools::ManagedImage</ref> &amp;</type>
        <definition>const VkTools::ManagedImage &amp; vlkx::TextureImage::get</definition>
        <argsstring>() const override</argsstring>
        <name>get</name>
        <qualifiedname>vlkx::TextureImage::get</qualifiedname>
        <reimplements refid="classvlkx_1_1_image_1a63fd9adffc756b6dfaf1f6c450d48b7f">get</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="197" column="37" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a0ae62428fb6855079e2ce30ba2cbd994" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const VkImage &amp;</type>
        <definition>const VkImage &amp; vlkx::TextureImage::getImage</definition>
        <argsstring>() const override</argsstring>
        <name>getImage</name>
        <qualifiedname>vlkx::TextureImage::getImage</qualifiedname>
        <reimplements refid="classvlkx_1_1_image_1a6c8bc5ea401cb84fdd42f83df5e73c49">getImage</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="198" column="23" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a5cf677ad4ed749effba8d2d8d624b148" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>VkDescriptorImageInfo</type>
        <definition>VkDescriptorImageInfo vlkx::TextureImage::getInfo</definition>
        <argsstring>(VkImageLayout layout) const override</argsstring>
        <name>getInfo</name>
        <qualifiedname>vlkx::TextureImage::getInfo</qualifiedname>
        <reimplements refid="classvlkx_1_1_samplable_image_1aa3d870e3c7cdd22cbc1aa0c6220a9a51">getInfo</reimplements>
        <param>
          <type>VkImageLayout</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="200" column="31" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_texture_image_1a634a588b5fb346d72333b41f42832a31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classvlkx_1_1_image_usage" kindref="compound">ImageUsage</ref></type>
        <definition>ImageUsage vlkx::TextureImage::getUsage</definition>
        <argsstring>() const override</argsstring>
        <name>getUsage</name>
        <qualifiedname>vlkx::TextureImage::getUsage</qualifiedname>
        <reimplements refid="classvlkx_1_1_image_1a6f83af709998b8b943bd7eb2f256ccb3">getUsage</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="204" column="20" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="204" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>vlkx::Image</label>
        <link refid="classvlkx_1_1_image"/>
      </node>
      <node id="3">
        <label>vlkx::SamplableImage</label>
        <link refid="classvlkx_1_1_samplable_image"/>
      </node>
      <node id="1">
        <label>vlkx::TextureImage</label>
        <link refid="classvlkx_1_1_texture_image"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>QueueFamilies</label>
        <link refid="struct_queue_families"/>
      </node>
      <node id="4">
        <label>SwapChainMeta</label>
        <link refid="struct_swap_chain_meta"/>
      </node>
      <node id="3">
        <label>VulkanDevice</label>
        <link refid="class_vulkan_device"/>
        <childnode refid="4" relation="usage">
          <edgelabel>swapChain</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queueData</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>vlkx::Image</label>
        <link refid="classvlkx_1_1_image"/>
        <childnode refid="3" relation="usage">
          <edgelabel>dev</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>vlkx::SamplableImage</label>
        <link refid="classvlkx_1_1_samplable_image"/>
      </node>
      <node id="1">
        <label>vlkx::TextureImage</label>
        <link refid="classvlkx_1_1_texture_image"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" line="174" column="5" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/vulkan/abstraction/Image.h" bodystart="174" bodyend="222"/>
    <listofallmembers>
      <member refid="classvlkx_1_1_texture_image_1ae8d2d0207567df6a9868b12f113bad15" prot="private" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>buffer</name></member>
      <member refid="classvlkx_1_1_image_1ad3c9f7725c0326b3a6ed15af0e5b3311" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>dev</name></member>
      <member refid="classvlkx_1_1_image_1af8b5b8edcc1c31e433636f8df7a8cd65" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>extent</name></member>
      <member refid="classvlkx_1_1_image_1a99d4d8aea8bc079e8f6100d781c491fb" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>format</name></member>
      <member refid="classvlkx_1_1_texture_image_1a70071b1b5b50374cce613aa39f187d41" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>get</name></member>
      <member refid="classvlkx_1_1_image_1aa6692fe8203c2f1f886b6442849c1d20" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getExtent</name></member>
      <member refid="classvlkx_1_1_image_1ac9068c38b75bbc202a4613957cbc2b07" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getFormat</name></member>
      <member refid="classvlkx_1_1_texture_image_1a0ae62428fb6855079e2ce30ba2cbd994" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>getImage</name></member>
      <member refid="classvlkx_1_1_texture_image_1a5cf677ad4ed749effba8d2d8d624b148" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>getInfo</name></member>
      <member refid="classvlkx_1_1_samplable_image_1a9c424fcea552597b5c06e2317386f110" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getInfoForLinear</name></member>
      <member refid="classvlkx_1_1_samplable_image_1a998e6b786579af52725d8c9855420369" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getInfoForSampling</name></member>
      <member refid="classvlkx_1_1_image_1aea109b1d894c87e2f9ef160f9164df94" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getLinearType</name></member>
      <member refid="classvlkx_1_1_image_1aed5769c2d20163af3ec2410ea914c8b1" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>getSamples</name></member>
      <member refid="classvlkx_1_1_image_1a4c75d7018b0881c19382ec7805ff06a2" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getSampleType</name></member>
      <member refid="classvlkx_1_1_texture_image_1a634a588b5fb346d72333b41f42832a31" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>getUsage</name></member>
      <member refid="classvlkx_1_1_image_1ab434a1c52c416a7c98a49c94695499d7" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>getView</name></member>
      <member refid="classvlkx_1_1_image_1a86105309cd906795ab8f49b565bc5cd5" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>Image</name></member>
      <member refid="classvlkx_1_1_image_1a395b940bbf4cb7275e6d840d01fd8484" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>Image</name></member>
      <member refid="classvlkx_1_1_image_1a84cae485afc47224352f4a45d8c1d323" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>loadCubeFromDisk</name></member>
      <member refid="classvlkx_1_1_image_1ace0107e2305fa465e515452f3763cc42" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>loadSingleFromDisk</name></member>
      <member refid="classvlkx_1_1_image_1aa6e80385448248ebf72c1f1b324fb3ea" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>operator*</name></member>
      <member refid="classvlkx_1_1_texture_image_1a3ea418a21c7abc5371592567091eb939" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>operator=</name></member>
      <member refid="classvlkx_1_1_image_1a61ede908c89b0a10c655949808581e46" prot="public" virt="non-virtual" ambiguityscope="vlkx::Image::"><scope>vlkx::TextureImage</scope><name>operator=</name></member>
      <member refid="classvlkx_1_1_image_1a68cef640edb4ead7111bf6adc1ba60ed" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>sampleCount</name></member>
      <member refid="classvlkx_1_1_texture_image_1a603535342c05b742babef114d1e6a49b" prot="private" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>sampler</name></member>
      <member refid="classvlkx_1_1_image_1a754306e09548155a57273fd32b3a9638" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>setView</name></member>
      <member refid="classvlkx_1_1_texture_image_1a2b0f26622825b54180cf1fe8b2c52728" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>TextureImage</name></member>
      <member refid="classvlkx_1_1_texture_image_1ae36f75479a9b8f80b39202d82303ef27" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>TextureImage</name></member>
      <member refid="classvlkx_1_1_texture_image_1a5d680edd9e1cb6e84927809f463f760c" prot="public" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>TextureImage</name></member>
      <member refid="classvlkx_1_1_image_1aeca0538721261dcfd4c18597db16e569" prot="protected" virt="non-virtual"><scope>vlkx::TextureImage</scope><name>view</name></member>
      <member refid="classvlkx_1_1_image_1a4e2c195d40a4b560443dd1bbb143fe0e" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>~Image</name></member>
      <member refid="classvlkx_1_1_samplable_image_1ad83265d38baf32d4ee1e7f58b403c49b" prot="public" virt="virtual"><scope>vlkx::TextureImage</scope><name>~SamplableImage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
