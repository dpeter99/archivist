<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classvlkx_1_1_compute_pipeline_builder" kind="class" language="C++" prot="public">
    <compoundname>vlkx::ComputePipelineBuilder</compoundname>
    <basecompoundref refid="classvlkx_1_1_pipeline_builder" prot="public" virt="non-virtual">vlkx::PipelineBuilder</basecompoundref>
    <includes refid="_pipeline_8h" local="no">Pipeline.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvlkx_1_1_compute_pipeline_builder_1a72e5f8aabb5ae9be15c8988bcc1c6b58" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; vlkx::ComputePipelineBuilder::shaderPath</definition>
        <argsstring></argsstring>
        <name>shaderPath</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::shaderPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="145" column="23" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1a7092467b51e408e43cdc28c045b94902" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vlkx::ComputePipelineBuilder::ComputePipelineBuilder</definition>
        <argsstring>(std::optional&lt; int &gt; maxCache=std::nullopt)</argsstring>
        <name>ComputePipelineBuilder</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::ComputePipelineBuilder</qualifiedname>
        <param>
          <type>std::optional&lt; int &gt;</type>
          <declname>maxCache</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="131" column="18" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1a2209360076e0d1397a997b0615888a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vlkx::ComputePipelineBuilder::ComputePipelineBuilder</definition>
        <argsstring>(const ComputePipelineBuilder &amp;)=delete</argsstring>
        <name>ComputePipelineBuilder</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::ComputePipelineBuilder</qualifiedname>
        <param>
          <type>const <ref refid="classvlkx_1_1_compute_pipeline_builder" kindref="compound">ComputePipelineBuilder</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="133" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1a3ec87ad9a093812cbc4e1d470394f81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvlkx_1_1_compute_pipeline_builder" kindref="compound">ComputePipelineBuilder</ref> &amp;</type>
        <definition>ComputePipelineBuilder &amp; vlkx::ComputePipelineBuilder::operator=</definition>
        <argsstring>(const ComputePipelineBuilder &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classvlkx_1_1_compute_pipeline_builder" kindref="compound">ComputePipelineBuilder</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="134" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1af05f706f743bc83e43b99fd8563a154c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_generic_render_pass_8h_1a68b39832e0bbd552c45aae02054bbe79" kindref="member">fluent</ref></type>
        <definition>ComputePipelineBuilder &amp; vlkx::ComputePipelineBuilder::name</definition>
        <argsstring>(std::string &amp;&amp;name)</argsstring>
        <name>name</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::name</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="138" column="16" bodyfile="shadow-engine/shadow-renderer/src/render/pipeline/Pipeline.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1a08ed641037563a2176342cab9e5a3427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_generic_render_pass_8h_1a68b39832e0bbd552c45aae02054bbe79" kindref="member">fluent</ref></type>
        <definition>ComputePipelineBuilder &amp; vlkx::ComputePipelineBuilder::layout</definition>
        <argsstring>(std::vector&lt; VkDescriptorSetLayout &gt; &amp;&amp;descLayouts, std::vector&lt; VkPushConstantRange &gt; &amp;&amp;pushConstants)</argsstring>
        <name>layout</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::layout</qualifiedname>
        <param>
          <type>std::vector&lt; VkDescriptorSetLayout &gt; &amp;&amp;</type>
          <declname>descLayouts</declname>
        </param>
        <param>
          <type>std::vector&lt; VkPushConstantRange &gt; &amp;&amp;</type>
          <declname>pushConstants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="139" column="16" bodyfile="shadow-engine/shadow-renderer/src/render/pipeline/Pipeline.cpp" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1a30ba558773c831545aa2607bb45b120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_generic_render_pass_8h_1a68b39832e0bbd552c45aae02054bbe79" kindref="member">fluent</ref></type>
        <definition>ComputePipelineBuilder &amp; vlkx::ComputePipelineBuilder::shader</definition>
        <argsstring>(std::string &amp;&amp;path)</argsstring>
        <name>shader</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::shader</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="140" column="16" bodyfile="shadow-engine/shadow-renderer/src/render/pipeline/Pipeline.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classvlkx_1_1_compute_pipeline_builder_1a7b608ca529ebb8969ade3a36b9a7ea22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classvlkx_1_1_pipeline" kindref="compound">Pipeline</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Pipeline &gt; vlkx::ComputePipelineBuilder::build</definition>
        <argsstring>() const override</argsstring>
        <name>build</name>
        <qualifiedname>vlkx::ComputePipelineBuilder::build</qualifiedname>
        <reimplements refid="classvlkx_1_1_pipeline_builder_1ad3942e094ce70b2ba93b574768302bea">build</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="142" column="25" bodyfile="shadow-engine/shadow-renderer/src/render/pipeline/Pipeline.cpp" bodystart="272" bodyend="302"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Use when creating Compute Shader pipelines. Internal state is preserved so that multiple pipelines can be created with one builder. However, shaders are single-usage. Bind a new shader before claling build again. See <ref refid="classvlkx_1_1_shader_module" kindref="compound">ShaderModule</ref> for more information, and how to change this. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>vlkx::ComputePipelineBuilder</label>
        <link refid="classvlkx_1_1_compute_pipeline_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vlkx::PipelineBuilder</label>
        <link refid="classvlkx_1_1_pipeline_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>vlkx::ComputePipelineBuilder</label>
        <link refid="classvlkx_1_1_compute_pipeline_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vlkx::PipelineBuilder</label>
        <link refid="classvlkx_1_1_pipeline_builder"/>
      </node>
    </collaborationgraph>
    <location file="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" line="129" column="5" bodyfile="shadow-engine/shadow-renderer/inc/vlkx/render/shader/Pipeline.h" bodystart="129" bodyend="146"/>
    <listofallmembers>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a7b608ca529ebb8969ade3a36b9a7ea22" prot="public" virt="virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>build</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a7092467b51e408e43cdc28c045b94902" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>ComputePipelineBuilder</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a2209360076e0d1397a997b0615888a5c" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>ComputePipelineBuilder</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a65fd212125818c0f96c064b8b13cf069" prot="protected" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>getLayout</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a75fd7368111f0304716e4d93df0addfe" prot="protected" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>getName</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1af56031e253ed578425b016c9ec007c7b" prot="protected" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>hasLayout</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a08ed641037563a2176342cab9e5a3427" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>layout</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1af05f706f743bc83e43b99fd8563a154c" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>name</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a3ec87ad9a093812cbc4e1d470394f81d" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>operator=</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a81582cacf02c2f3d9a4cb8870acc7d8e" prot="public" virt="non-virtual" ambiguityscope="vlkx::PipelineBuilder::"><scope>vlkx::ComputePipelineBuilder</scope><name>operator=</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a68fd2d6f6f7ffc45a9a4021577c191e5" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>PipelineBuilder</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a4a40f7781e10cd8024ad370ba1c4049b" prot="protected" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>PipelineBuilder</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1ab2d07a03863810149b799d0c091711b0" prot="protected" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>setLayout</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a608297e8fd73ce118c96f3e1488df455" prot="protected" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>setName</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a30ba558773c831545aa2607bb45b120e" prot="public" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>shader</name></member>
      <member refid="classvlkx_1_1_compute_pipeline_builder_1a72e5f8aabb5ae9be15c8988bcc1c6b58" prot="private" virt="non-virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>shaderPath</name></member>
      <member refid="classvlkx_1_1_pipeline_builder_1a4ec90bc8f54b7c2df3020fdcb832e627" prot="public" virt="virtual"><scope>vlkx::ComputePipelineBuilder</scope><name>~PipelineBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
