<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="namespace_catch_1_1_detail" kind="namespace" language="C++">
    <compoundname>Catch::Detail</compoundname>
    <innerclass refid="class_catch_1_1_detail_1_1_approx" prot="public">Catch::Detail::Approx</innerclass>
    <innerclass refid="struct_catch_1_1_detail_1_1_enum_info" prot="public">Catch::Detail::EnumInfo</innerclass>
    <innerclass refid="class_catch_1_1_detail_1_1_is_stream_insertable" prot="public">Catch::Detail::IsStreamInsertable</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string Catch::Detail::unprintableString</definition>
        <argsstring></argsstring>
        <name>unprintableString</name>
        <qualifiedname>Catch::Detail::unprintableString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1554" column="34" declfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" declline="1554" declcolumn="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Catch::Detail::rawMemoryToString</definition>
        <argsstring>(const void *object, std::size_t size)</argsstring>
        <name>rawMemoryToString</name>
        <qualifiedname>Catch::Detail::rawMemoryToString</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1556" column="21" declfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" declline="1556" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1a371620ed524abfcae5c3772bf49b563a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Catch::Detail::rawMemoryToString</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>rawMemoryToString</name>
        <qualifiedname>Catch::Detail::rawMemoryToString</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1559" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1559" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Catch::Detail::convertUnknownEnumToString</definition>
        <argsstring>(E e)</argsstring>
        <name>convertUnknownEnumToString</name>
        <qualifiedname>Catch::Detail::convertUnknownEnumToString</qualifiedname>
        <param>
          <type>E</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1649" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1649" bodyend="1651" declfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" declline="1577" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_enum&lt; T &gt;::value &amp;&amp;!std::is_base_of&lt; std::exception, T &gt;::value, std::string &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_enum&lt; T &gt;::value &amp;&amp;!std::is_base_of&lt; std::exception, T &gt;::value, std::string &gt;::type Catch::Detail::convertUnstreamable</definition>
        <argsstring>(T const &amp;)</argsstring>
        <name>convertUnstreamable</name>
        <qualifiedname>Catch::Detail::convertUnstreamable</qualifiedname>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1582" column="9" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1582" bodyend="1584"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1a669969ab020f5a314d6fa97749a99f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_enum&lt; T &gt;::value &amp;&amp;std::is_base_of&lt; std::exception, T &gt;::value, std::string &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_enum&lt; T &gt;::value &amp;&amp;std::is_base_of&lt; std::exception, T &gt;::value, std::string &gt;::type Catch::Detail::convertUnstreamable</definition>
        <argsstring>(T const &amp;ex)</argsstring>
        <name>convertUnstreamable</name>
        <qualifiedname>Catch::Detail::convertUnstreamable</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1588" column="9" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1588" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1af5310e4687d8c000e7911b91164756e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_enum&lt; T &gt;::value, std::string &gt;::type</type>
        <definition>std::enable_if&lt; std::is_enum&lt; T &gt;::value, std::string &gt;::type Catch::Detail::convertUnstreamable</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>convertUnstreamable</name>
        <qualifiedname>Catch::Detail::convertUnstreamable</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1595" column="9" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1595" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Catch::Detail::stringify</definition>
        <argsstring>(const T &amp;e)</argsstring>
        <name>stringify</name>
        <qualifiedname>Catch::Detail::stringify</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1644" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1644" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="namespace_catch_1_1_detail_1ac954cf158347a76a5b0c3f4fa9a9fa52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>InputIterator</defval>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Catch::Detail::rangeToString</definition>
        <argsstring>(InputIterator first, Sentinel last)</argsstring>
        <name>rangeToString</name>
        <qualifiedname>Catch::Detail::rangeToString</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1829" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="1829" bodyend="1839"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="1465" column="5"/>
  </compounddef>
</doxygen>
