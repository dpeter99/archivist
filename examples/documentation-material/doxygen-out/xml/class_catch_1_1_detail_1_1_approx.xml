<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_catch_1_1_detail_1_1_approx" kind="class" language="C++" prot="public">
    <compoundname>Catch::Detail::Approx</compoundname>
    <includes refid="catch_8hpp" local="no">catch.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_catch_1_1_detail_1_1_approx_1af17c8e869ae7a55d14b99eb18e178114" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_epsilon</definition>
        <argsstring></argsstring>
        <name>m_epsilon</name>
        <qualifiedname>Catch::Detail::Approx::m_epsilon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3172" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_catch_1_1_detail_1_1_approx_1a4262a7e821eec507b424c335121ea0d8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_margin</definition>
        <argsstring></argsstring>
        <name>m_margin</name>
        <qualifiedname>Catch::Detail::Approx::m_margin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3173" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_catch_1_1_detail_1_1_approx_1a65e9bdab9113ff3300b45f0a4e048dd7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_scale</definition>
        <argsstring></argsstring>
        <name>m_scale</name>
        <qualifiedname>Catch::Detail::Approx::m_scale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3174" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_catch_1_1_detail_1_1_approx_1af7aeef703bd591f5ec85407b1dac053c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <qualifiedname>Catch::Detail::Approx::m_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3175" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1af53c48227a7b654da58adeb1d360b715" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Catch::Detail::Approx::equalityComparisonImpl</definition>
        <argsstring>(double other) const</argsstring>
        <name>equalityComparisonImpl</name>
        <qualifiedname>Catch::Detail::Approx::equalityComparisonImpl</qualifiedname>
        <param>
          <type>double</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3080" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1aff04b8b32edc707138eb395ed45ec576" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Catch::Detail::Approx::setMargin</definition>
        <argsstring>(double margin)</argsstring>
        <name>setMargin</name>
        <qualifiedname>Catch::Detail::Approx::setMargin</qualifiedname>
        <param>
          <type>double</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3083" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a28fd65e069b698bc7ae8f060bfbcd6b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Catch::Detail::Approx::setEpsilon</definition>
        <argsstring>(double epsilon)</argsstring>
        <name>setEpsilon</name>
        <qualifiedname>Catch::Detail::Approx::setEpsilon</qualifiedname>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3086" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a1a8618ea8db08c66bd3d9fe8f74b957a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Catch::Detail::Approx::Approx</definition>
        <argsstring>(double value)</argsstring>
        <name>Approx</name>
        <qualifiedname>Catch::Detail::Approx::Approx</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3089" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1aa9adf5f05e641df770039543d5067d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref></type>
        <definition>Approx Catch::Detail::Approx::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>Catch::Detail::Approx::operator-</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3093" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a006f6f92cecf2b2e7d2c70329709f6e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref></type>
        <definition>Approx Catch::Detail::Approx::operator()</definition>
        <argsstring>(T const &amp;value) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Catch::Detail::Approx::operator()</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3096" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3096" bodyend="3102"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1ab14b979fa8a37f21d037157fabed4072" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Catch::Detail::Approx::Approx</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>Approx</name>
        <qualifiedname>Catch::Detail::Approx::Approx</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3105" column="18" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3105" bodyend="3106"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a1feb255ab2b116e126c1994ab6c250fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> &amp;</type>
        <definition>Approx &amp; Catch::Detail::Approx::epsilon</definition>
        <argsstring>(T const &amp;newEpsilon)</argsstring>
        <name>epsilon</name>
        <qualifiedname>Catch::Detail::Approx::epsilon</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>newEpsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3150" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3150" bodyend="3154"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a617c79e67f8a52df3918293a3a8066ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> &amp;</type>
        <definition>Approx &amp; Catch::Detail::Approx::margin</definition>
        <argsstring>(T const &amp;newMargin)</argsstring>
        <name>margin</name>
        <qualifiedname>Catch::Detail::Approx::margin</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>newMargin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3157" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3157" bodyend="3161"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a9504645876aabe1fe4a807b84e445bc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> &amp;</type>
        <definition>Approx &amp; Catch::Detail::Approx::scale</definition>
        <argsstring>(T const &amp;newScale)</argsstring>
        <name>scale</name>
        <qualifiedname>Catch::Detail::Approx::scale</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>newScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3164" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3164" bodyend="3167"/>
      </memberdef>
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1a972fd9ac60607483263f1b0f0f9955e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Catch::Detail::Approx::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <qualifiedname>Catch::Detail::Approx::toString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3169" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_catch_1_1_detail_1_1_approx_1aaf86dc0ee92272ac2d9839197a07951d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref></type>
        <definition>static Approx Catch::Detail::Approx::custom</definition>
        <argsstring>()</argsstring>
        <name>custom</name>
        <qualifiedname>Catch::Detail::Approx::custom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3091" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1ab38782a37d09b527ca5e126dbf433dda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const T &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Catch::Detail::Approx::operator==</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3109" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3109" bodyend="3112"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1a0e5ef1957d4c38d7857005909c613743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(Approx const &amp;lhs, const T &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Catch::Detail::Approx::operator==</qualifiedname>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3115" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3115" bodyend="3117"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1a29696f14ebd51887c8c88e771d12ef54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(T const &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Catch::Detail::Approx::operator!=</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3120" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3120" bodyend="3122"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1a31d62e3c35abb86cf25e02601966ca5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(Approx const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Catch::Detail::Approx::operator!=</qualifiedname>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3125" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3125" bodyend="3127"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1a0369de03e81bc2ceaf6c9d830476bd49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(T const &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Catch::Detail::Approx::operator&lt;=</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3130" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3130" bodyend="3132"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1a6040b908588745570847d7ae8483b091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(Approx const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Catch::Detail::Approx::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3135" column="16" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3135" bodyend="3137"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1affd27efc62be386daeecb7a09e828d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(T const &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Catch::Detail::Approx::operator&gt;=</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3140" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3140" bodyend="3142"/>
      </memberdef>
      <memberdef kind="friend" id="class_catch_1_1_detail_1_1_approx_1a5899b8a36725406701e2ebded2971ee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(Approx const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Catch::Detail::Approx::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3145" column="21" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3145" bodyend="3147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="shadow-engine/shadow-file-format/test/catch2/catch.hpp" line="3078" column="5" bodyfile="shadow-engine/shadow-file-format/test/catch2/catch.hpp" bodystart="3078" bodyend="3176"/>
    <listofallmembers>
      <member refid="class_catch_1_1_detail_1_1_approx_1a1a8618ea8db08c66bd3d9fe8f74b957a" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>Approx</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1ab14b979fa8a37f21d037157fabed4072" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>Approx</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1aaf86dc0ee92272ac2d9839197a07951d" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>custom</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a1feb255ab2b116e126c1994ab6c250fd" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>epsilon</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1af53c48227a7b654da58adeb1d360b715" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>equalityComparisonImpl</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1af17c8e869ae7a55d14b99eb18e178114" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_epsilon</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a4262a7e821eec507b424c335121ea0d8" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_margin</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a65e9bdab9113ff3300b45f0a4e048dd7" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_scale</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1af7aeef703bd591f5ec85407b1dac053c" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_value</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a617c79e67f8a52df3918293a3a8066ef" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>margin</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a29696f14ebd51887c8c88e771d12ef54" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator!=</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a31d62e3c35abb86cf25e02601966ca5d" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator!=</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a006f6f92cecf2b2e7d2c70329709f6e4" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator()</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1aa9adf5f05e641df770039543d5067d30" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator-</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a0369de03e81bc2ceaf6c9d830476bd49" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&lt;=</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a6040b908588745570847d7ae8483b091" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&lt;=</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1ab38782a37d09b527ca5e126dbf433dda" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator==</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a0e5ef1957d4c38d7857005909c613743" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator==</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1affd27efc62be386daeecb7a09e828d44" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&gt;=</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a5899b8a36725406701e2ebded2971ee6" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&gt;=</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a9504645876aabe1fe4a807b84e445bc2" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>scale</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a28fd65e069b698bc7ae8f060bfbcd6b6" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>setEpsilon</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1aff04b8b32edc707138eb395ed45ec576" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>setMargin</name></member>
      <member refid="class_catch_1_1_detail_1_1_approx_1a972fd9ac60607483263f1b0f0f9955e6" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>toString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
