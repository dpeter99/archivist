<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="statistics" kind="page">
    <compoundname>statistics</compoundname>
    <title>Statistics</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This library contains several functions that return information about its internal state, especially the amount of memory allocated from Vulkan.</para>
<sect1 id="statistics_1statistics_numeric_statistics">
<title>Numeric statistics</title>
<para>If you need to obtain basic statistics about memory usage per heap, together with current budget, you can call function <ref refid="group__group__stats_1ga620eaa8a9d919860f7deaf4d0148b2a1" kindref="member">vmaGetHeapBudgets()</ref> and inspect structure <ref refid="struct_vma_budget" kindref="compound">VmaBudget</ref>. This is useful to keep track of memory usage and stay withing budget (see also <ref refid="staying_within_budget" kindref="compound">Staying within budget</ref>). Example:</para>
<para><programlisting><codeline><highlight class="normal">uint32_t<sp/>heapIndex<sp/>=<sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">VmaBudget<sp/>budgets[VK_MAX_MEMORY_HEAPS];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__stats_1ga620eaa8a9d919860f7deaf4d0148b2a1" kindref="member">vmaGetHeapBudgets</ref>(allocator,<sp/>budgets);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;My<sp/>heap<sp/>currently<sp/>has<sp/>%u<sp/>allocations<sp/>taking<sp/>%llu<sp/>B,\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>budgets[heapIndex].statistics.allocationCount,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>budgets[heapIndex].statistics.allocationBytes);</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;allocated<sp/>out<sp/>of<sp/>%u<sp/>Vulkan<sp/>device<sp/>memory<sp/>blocks<sp/>taking<sp/>%llu<sp/>B,\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>budgets[heapIndex].statistics.blockCount,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>budgets[heapIndex].statistics.blockBytes);</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Vulkan<sp/>reports<sp/>total<sp/>usage<sp/>%llu<sp/>B<sp/>with<sp/>budget<sp/>%llu<sp/>B.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>budgets[heapIndex].usage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>budgets[heapIndex].budget);</highlight></codeline>
</programlisting></para>
<para>You can query for more detailed statistics per memory heap, type, and totals, including minimum and maximum allocation size and unused range size, by calling function <ref refid="group__group__stats_1gad176279c8da8f50399674b2ef03ca866" kindref="member">vmaCalculateStatistics()</ref> and inspecting structure <ref refid="struct_vma_total_statistics" kindref="compound">VmaTotalStatistics</ref>. This function is slower though, as it has to traverse all the internal data structures, so it should be used only for debugging purposes.</para>
<para>You can query for statistics of a custom pool using function <ref refid="group__group__stats_1ga7e489a68f893dbefc78a6ac9413c4220" kindref="member">vmaGetPoolStatistics()</ref> or <ref refid="group__group__stats_1ga54b57aa8f511406711f4b918028d8f60" kindref="member">vmaCalculatePoolStatistics()</ref>.</para>
<para>You can query for information about a specific allocation using function <ref refid="group__group__alloc_1gab9c96ca6bb55ad9069829fe8355bbb79" kindref="member">vmaGetAllocationInfo()</ref>. It fill structure <ref refid="struct_vma_allocation_info" kindref="compound">VmaAllocationInfo</ref>.</para>
</sect1>
<sect1 id="statistics_1statistics_json_dump">
<title>JSON dump</title>
<para>You can dump internal state of the allocator to a string in JSON format using function <ref refid="group__group__stats_1ga9326cba3c64929b59a15c3ca9cdc8cdb" kindref="member">vmaBuildStatsString()</ref>. The result is guaranteed to be correct JSON. It uses ANSI encoding. Any strings provided by user (see [Allocation names](<ref refid="allocation_annotation_1allocation_names" kindref="member">Allocation names</ref>)) are copied as-is and properly escaped for JSON, so if they use UTF-8, ISO-8859-2 or any other encoding, this JSON string can be treated as using this encoding. It must be freed using function <ref refid="group__group__stats_1gad9b3c6a5dce6aea00719ccb2d3a780f3" kindref="member">vmaFreeStatsString()</ref>.</para>
<para>The format of this JSON string is not part of official documentation of the library, but it will not change in backward-incompatible way without increasing library major version number and appropriate mention in changelog.</para>
<para>The JSON string contains all the data that can be obtained using <ref refid="group__group__stats_1gad176279c8da8f50399674b2ef03ca866" kindref="member">vmaCalculateStatistics()</ref>. It can also contain detailed map of allocated memory blocks and their regions - free and occupied by allocations. This allows e.g. to visualize the memory or assess fragmentation. </para>
</sect1>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h"/>
  </compounddef>
</doxygen>
