<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="struct_vma_allocator_create_info" kind="struct" language="C++" prot="public">
    <compoundname>VmaAllocatorCreateInfo</compoundname>
    <includes refid="vk__mem__alloc_8h" local="no">vk_mem_alloc.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1a392ea2ecbaff93f91a7c49f735ad4346" prot="public" static="no" mutable="no">
        <type><ref refid="group__group__init_1gacfe6863e160722c2c1bbcf7573fddc4d" kindref="member">VmaAllocatorCreateFlags</ref></type>
        <definition>VmaAllocatorCreateFlags VmaAllocatorCreateInfo::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <qualifiedname>VmaAllocatorCreateInfo::flags</qualifiedname>
        <briefdescription>
<para>Flags for created allocator. Use <ref refid="group__group__init_1ga4f87c9100d154a65a4ad495f7763cf7c" kindref="member">VmaAllocatorCreateFlagBits</ref> enum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1003" column="29" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1ad09ce637aa92cb7c8c2a742943668087" prot="public" static="no" mutable="no">
        <type>VkPhysicalDevice <ref refid="vk__mem__alloc_8h_1a0366f45516136c073f98582341ecf9de" kindref="member">VMA_NOT_NULL</ref></type>
        <definition>VkPhysicalDevice VMA_NOT_NULL VmaAllocatorCreateInfo::physicalDevice</definition>
        <argsstring></argsstring>
        <name>physicalDevice</name>
        <qualifiedname>VmaAllocatorCreateInfo::physicalDevice</qualifiedname>
        <briefdescription>
<para>Vulkan physical device. </para>
        </briefdescription>
        <detaileddescription>
<para>It must be valid throughout whole lifetime of created allocator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1006" column="35" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1ac35aa355d3bfcbf6bb2eb88ccf68125c" prot="public" static="no" mutable="no">
        <type>VkDevice <ref refid="vk__mem__alloc_8h_1a0366f45516136c073f98582341ecf9de" kindref="member">VMA_NOT_NULL</ref></type>
        <definition>VkDevice VMA_NOT_NULL VmaAllocatorCreateInfo::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <qualifiedname>VmaAllocatorCreateInfo::device</qualifiedname>
        <briefdescription>
<para>Vulkan device. </para>
        </briefdescription>
        <detaileddescription>
<para>It must be valid throughout whole lifetime of created allocator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1009" column="27" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1a8e4714298e3121cdd8b214a1ae7a637a" prot="public" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize VmaAllocatorCreateInfo::preferredLargeHeapBlockSize</definition>
        <argsstring></argsstring>
        <name>preferredLargeHeapBlockSize</name>
        <qualifiedname>VmaAllocatorCreateInfo::preferredLargeHeapBlockSize</qualifiedname>
        <briefdescription>
<para>Preferred size of a single `VkDeviceMemory` block to be allocated from large heaps &gt; 1 GiB. Optional. </para>
        </briefdescription>
        <detaileddescription>
<para>Set to 0 to use default, which is currently 256 MiB. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1012" column="18" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1aa84222aa55c2b42c1eff64b16978c8c2" prot="public" static="no" mutable="no">
        <type>const VkAllocationCallbacks *<ref refid="vk__mem__alloc_8h_1a3ff043960766509fbba947bc2c68bdb6" kindref="member">VMA_NULLABLE</ref></type>
        <definition>const VkAllocationCallbacks* VMA_NULLABLE VmaAllocatorCreateInfo::pAllocationCallbacks</definition>
        <argsstring></argsstring>
        <name>pAllocationCallbacks</name>
        <qualifiedname>VmaAllocatorCreateInfo::pAllocationCallbacks</qualifiedname>
        <briefdescription>
<para>Custom CPU memory allocation callbacks. Optional. </para>
        </briefdescription>
        <detaileddescription>
<para>Optional, can be null. When specified, will also be used for all CPU-side memory allocations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1015" column="46" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1afbb24551124b16bdaa29f92eb96b8c56" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_vma_device_memory_callbacks" kindref="compound">VmaDeviceMemoryCallbacks</ref> *<ref refid="vk__mem__alloc_8h_1a3ff043960766509fbba947bc2c68bdb6" kindref="member">VMA_NULLABLE</ref></type>
        <definition>const VmaDeviceMemoryCallbacks* VMA_NULLABLE VmaAllocatorCreateInfo::pDeviceMemoryCallbacks</definition>
        <argsstring></argsstring>
        <name>pDeviceMemoryCallbacks</name>
        <qualifiedname>VmaAllocatorCreateInfo::pDeviceMemoryCallbacks</qualifiedname>
        <briefdescription>
<para>Informative callbacks for `vkAllocateMemory`, `vkFreeMemory`. Optional. </para>
        </briefdescription>
        <detaileddescription>
<para>Optional, can be null. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1018" column="49" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1a5e45da0879451e58bee2f3a975f228f5" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_vma_vulkan_functions" kindref="compound">VmaVulkanFunctions</ref> *<ref refid="vk__mem__alloc_8h_1a3ff043960766509fbba947bc2c68bdb6" kindref="member">VMA_NULLABLE</ref></type>
        <definition>const VmaVulkanFunctions* VMA_NULLABLE VmaAllocatorCreateInfo::pVulkanFunctions</definition>
        <argsstring></argsstring>
        <name>pVulkanFunctions</name>
        <qualifiedname>VmaAllocatorCreateInfo::pVulkanFunctions</qualifiedname>
        <briefdescription>
<para>Pointers to Vulkan functions. Can be null. </para>
        </briefdescription>
        <detaileddescription>
<para>For details see [Pointers to Vulkan functions](<ref refid="configuration_1config_Vulkan_functions" kindref="member">Pointers to Vulkan functions</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1049" column="43" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1aa2d4e3d86e6828834a56cf9f9406149a" prot="public" static="no" mutable="no">
        <type>VkInstance <ref refid="vk__mem__alloc_8h_1a0366f45516136c073f98582341ecf9de" kindref="member">VMA_NOT_NULL</ref></type>
        <definition>VkInstance VMA_NOT_NULL VmaAllocatorCreateInfo::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <qualifiedname>VmaAllocatorCreateInfo::instance</qualifiedname>
        <briefdescription>
<para>Handle to Vulkan instance object. </para>
        </briefdescription>
        <detaileddescription>
<para>Starting from version 3.0.0 this member is no longer optional, it must be set! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1054" column="29" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vma_allocator_create_info_1ae0ffc55139b54520a6bb704b29ffc285" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t VmaAllocatorCreateInfo::vulkanApiVersion</definition>
        <argsstring></argsstring>
        <name>vulkanApiVersion</name>
        <qualifiedname>VmaAllocatorCreateInfo::vulkanApiVersion</qualifiedname>
        <briefdescription>
<para>Optional. The highest version of Vulkan that the application is designed to use. </para>
        </briefdescription>
        <detaileddescription>
<para>It must be a value in the format as created by macro `VK_MAKE_VERSION` or a constant like: `VK_API_VERSION_1_1`, `VK_API_VERSION_1_0`. The patch version number specified is ignored. Only the major and minor versions are considered. It must be less or equal (preferably equal) to value as passed to `vkCreateInstance` as `VkApplicationInfo::apiVersion`. Only versions 1.0, 1.1, 1.2, 1.3 are supported by the current implementation. Leaving it initialized to zero is equivalent to `VK_API_VERSION_1_0`. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1063" column="14" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1063" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_vma_allocator_create_info_1ad19447d8c50cdb04f0f473009edccd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const VkDeviceSize *<ref refid="vk__mem__alloc_8h_1a3ff043960766509fbba947bc2c68bdb6" kindref="member">VMA_NULLABLE</ref></type>
        <definition>const VkDeviceSize *VMA_NULLABLE VmaAllocatorCreateInfo::VMA_LEN_IF_NOT_NULL</definition>
        <argsstring>(&quot;VkPhysicalDeviceMemoryProperties::memoryHeapCount&quot;) pHeapSizeLimit</argsstring>
        <name>VMA_LEN_IF_NOT_NULL</name>
        <qualifiedname>VmaAllocatorCreateInfo::VMA_LEN_IF_NOT_NULL</qualifiedname>
        <param>
          <type>&quot;VkPhysicalDeviceMemoryProperties::memoryHeapCount&quot;</type>
        </param>
        <briefdescription>
<para>Either null or a pointer to an array of limits on maximum number of bytes that can be allocated out of particular Vulkan memory heap. </para>
        </briefdescription>
        <detaileddescription>
<para>If not NULL, it must be a pointer to an array of `VkPhysicalDeviceMemoryProperties::memoryHeapCount` elements, defining limit on maximum number of bytes that can be allocated out of particular Vulkan memory heap.</para>
<para>Any of the elements may be equal to `VK_WHOLE_SIZE`, which means no limit on that heap. This is also the default in case of `pHeapSizeLimit` = NULL.</para>
<para>If there is a limit defined for a heap:</para>
<para><itemizedlist>
<listitem><para>If user tries to allocate more memory from that heap using this allocator, the allocation fails with `VK_ERROR_OUT_OF_DEVICE_MEMORY`.</para>
</listitem><listitem><para>If the limit is smaller than heap size reported in `VkMemoryHeap::size`, the value of this limit will be reported instead when using <ref refid="group__group__init_1ga33698c6107c0da349c1dbf43615284df" kindref="member">vmaGetMemoryProperties()</ref>.</para>
</listitem></itemizedlist>
</para>
<para>Warning! Using this feature may not be equivalent to installing a GPU with smaller amount of memory, because graphics driver doesn&apos;t necessary fail new allocations with `VK_ERROR_OUT_OF_DEVICE_MEMORY` result when memory capacity is exceeded. It may return success and just silently migrate some device memory blocks to system RAM. This driver behavior can also be controlled using VK_AMD_memory_overallocation_behavior extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1043" column="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Description of a Allocator to be created. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>VmaAllocatorCreateInfo</label>
        <link refid="struct_vma_allocator_create_info"/>
        <childnode refid="2" relation="usage">
          <edgelabel>pDeviceMemoryCallbacks</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>pVulkanFunctions</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>VmaDeviceMemoryCallbacks</label>
        <link refid="struct_vma_device_memory_callbacks"/>
      </node>
      <node id="3">
        <label>VmaVulkanFunctions</label>
        <link refid="struct_vma_vulkan_functions"/>
      </node>
    </collaborationgraph>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1000" column="1" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1001" bodyend="1076"/>
    <listofallmembers>
      <member refid="struct_vma_allocator_create_info_1ac35aa355d3bfcbf6bb2eb88ccf68125c" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>device</name></member>
      <member refid="struct_vma_allocator_create_info_1a392ea2ecbaff93f91a7c49f735ad4346" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>flags</name></member>
      <member refid="struct_vma_allocator_create_info_1aa2d4e3d86e6828834a56cf9f9406149a" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>instance</name></member>
      <member refid="struct_vma_allocator_create_info_1aa84222aa55c2b42c1eff64b16978c8c2" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>pAllocationCallbacks</name></member>
      <member refid="struct_vma_allocator_create_info_1afbb24551124b16bdaa29f92eb96b8c56" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>pDeviceMemoryCallbacks</name></member>
      <member refid="struct_vma_allocator_create_info_1ad09ce637aa92cb7c8c2a742943668087" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>physicalDevice</name></member>
      <member refid="struct_vma_allocator_create_info_1a8e4714298e3121cdd8b214a1ae7a637a" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>preferredLargeHeapBlockSize</name></member>
      <member refid="struct_vma_allocator_create_info_1a5e45da0879451e58bee2f3a975f228f5" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>pVulkanFunctions</name></member>
      <member refid="struct_vma_allocator_create_info_1ad19447d8c50cdb04f0f473009edccd7c" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>VMA_LEN_IF_NOT_NULL</name></member>
      <member refid="struct_vma_allocator_create_info_1ae0ffc55139b54520a6bb704b29ffc285" prot="public" virt="non-virtual"><scope>VmaAllocatorCreateInfo</scope><name>vulkanApiVersion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
