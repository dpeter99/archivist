<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="vk_amd_device_coherent_memory" kind="page">
    <compoundname>vk_amd_device_coherent_memory</compoundname>
    <title>VK_AMD_device_coherent_memory</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>VK_AMD_device_coherent_memory is a device extension that enables access to additional memory types with `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` and `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD` flag. It is useful mostly for allocation of buffers intended for writing &quot;breadcrumb markers&quot; in between passes or draw calls, which in turn are useful for debugging GPU crash/hang/TDR cases.</para>
<para>When the extension is available but has not been enabled, Vulkan physical device still exposes those memory types, but their usage is forbidden. VMA automatically takes care of that - it returns `VK_ERROR_FEATURE_NOT_PRESENT` when an attempt to allocate memory of such type is made.</para>
<para>If you want to use this extension in connection with VMA, follow these steps:</para>
<sect1 id="vk_amd_device_coherent_memory_1vk_amd_device_coherent_memory_initialization">
<title>Initialization</title>
<para>1) Call `vkEnumerateDeviceExtensionProperties` for the physical device. Check if the extension is supported - if returned array of `VkExtensionProperties` contains &quot;VK_AMD_device_coherent_memory&quot;.</para>
<para>2) Call `vkGetPhysicalDeviceFeatures2` for the physical device instead of old `vkGetPhysicalDeviceFeatures`. Attach additional structure `VkPhysicalDeviceCoherentMemoryFeaturesAMD` to `VkPhysicalDeviceFeatures2::pNext` to be returned. Check if the device feature is really supported - check if `VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory` is true.</para>
<para>3) While creating device with `vkCreateDevice`, enable this extension - add &quot;VK_AMD_device_coherent_memory&quot; to the list passed as `VkDeviceCreateInfo::ppEnabledExtensionNames`.</para>
<para>4) While creating the device, also don&apos;t set `VkDeviceCreateInfo::pEnabledFeatures`. Fill in `VkPhysicalDeviceFeatures2` structure instead and pass it as `VkDeviceCreateInfo::pNext`. Enable this device feature - attach additional structure `VkPhysicalDeviceCoherentMemoryFeaturesAMD` to `VkPhysicalDeviceFeatures2::pNext` and set its member `deviceCoherentMemory` to `VK_TRUE`.</para>
<para>5) While creating <ref refid="struct_vma_allocator" kindref="compound">VmaAllocator</ref> with <ref refid="group__group__init_1gaf77c946fbecfcc54d02c3d1c1e7e23e7" kindref="member">vmaCreateAllocator()</ref> inform VMA that you have enabled this extension and feature - add <ref refid="group__group__init_1gga4f87c9100d154a65a4ad495f7763cf7ca2acce4886d8078552efa38878413970f" kindref="member">VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT</ref> to <ref refid="struct_vma_allocator_create_info_1a392ea2ecbaff93f91a7c49f735ad4346" kindref="member">VmaAllocatorCreateInfo::flags</ref>.</para>
</sect1>
<sect1 id="vk_amd_device_coherent_memory_1vk_amd_device_coherent_memory_usage">
<title>Usage</title>
<para>After following steps described above, you can create VMA allocations and custom pools out of the special `DEVICE_COHERENT` and `DEVICE_UNCACHED` memory types on eligible devices. There are multiple ways to do it, for example:</para>
<para><itemizedlist>
<listitem><para>You can request or prefer to allocate out of such memory types by adding `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD` to <ref refid="struct_vma_allocation_create_info_1a9166390303ff42d783305bc31c2b6b90" kindref="member">VmaAllocationCreateInfo::requiredFlags</ref> or <ref refid="struct_vma_allocation_create_info_1a7fe8d81a1ad10b2a2faacacee5b15d6d" kindref="member">VmaAllocationCreateInfo::preferredFlags</ref>. Those flags can be freely mixed with other ways of <ref refid="choosing_memory_type" kindref="compound">Choosing memory type</ref>, like setting <ref refid="struct_vma_allocation_create_info_1accb8b06b1f677d858cb9af20705fa910" kindref="member">VmaAllocationCreateInfo::usage</ref>.</para>
</listitem><listitem><para>If you manually found memory type index to use for this purpose, force allocation from this specific index by setting <ref refid="struct_vma_allocation_create_info_1a3bf940c0271d85d6ba32a4d820075055" kindref="member">VmaAllocationCreateInfo::memoryTypeBits</ref> `= 1u &lt;&lt; index`.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="vk_amd_device_coherent_memory_1vk_amd_device_coherent_memory_more_information">
<title>More information</title>
<para>To learn more about this extension, see [VK_AMD_device_coherent_memory in Vulkan specification](<ulink url="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_device_coherent_memory.html">https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_device_coherent_memory.html</ulink>)</para>
<para>Example use of this extension can be found in the code of the sample and test suite accompanying this library. </para>
</sect1>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h"/>
  </compounddef>
</doxygen>
