<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="struct_vma_defragmentation_pass_move_info" kind="struct" language="C++" prot="public">
    <compoundname>VmaDefragmentationPassMoveInfo</compoundname>
    <includes refid="vk__mem__alloc_8h" local="no">vk_mem_alloc.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_vma_defragmentation_pass_move_info_1a1b3e18c23f9691f35baf183e615c4408" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t VmaDefragmentationPassMoveInfo::moveCount</definition>
        <argsstring></argsstring>
        <name>moveCount</name>
        <qualifiedname>VmaDefragmentationPassMoveInfo::moveCount</qualifiedname>
        <briefdescription>
<para>Number of elements in the `pMoves` array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1443" column="14" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1443" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_vma_defragmentation_pass_move_info_1a761d239e4d75f197dc301c33be31d140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vma_defragmentation_move" kindref="compound">VmaDefragmentationMove</ref> *<ref refid="vk__mem__alloc_8h_1a3ff043960766509fbba947bc2c68bdb6" kindref="member">VMA_NULLABLE</ref></type>
        <definition>VmaDefragmentationMove *VMA_NULLABLE VmaDefragmentationPassMoveInfo::VMA_LEN_IF_NOT_NULL</definition>
        <argsstring>(moveCount) pMoves</argsstring>
        <name>VMA_LEN_IF_NOT_NULL</name>
        <qualifiedname>VmaDefragmentationPassMoveInfo::VMA_LEN_IF_NOT_NULL</qualifiedname>
        <param>
          <type><ref refid="struct_vma_defragmentation_pass_move_info_1a1b3e18c23f9691f35baf183e615c4408" kindref="member">moveCount</ref></type>
        </param>
        <briefdescription>
<para>Array of moves to be performed by the user in the current defragmentation pass. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer to an array of `moveCount` elements, owned by VMA, created in <ref refid="group__group__alloc_1gacbe4a77fdfa7ea29328d2f940d423ab7" kindref="member">vmaBeginDefragmentationPass()</ref>, destroyed in <ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref>.</para>
<para>For each element, you should:</para>
<para>1. Create a new buffer/image in the place pointed by VmaDefragmentationMove::dstMemory + VmaDefragmentationMove::dstOffset. 2. Copy data from the <ref refid="struct_vma_defragmentation_move_1a51c1ff05d7c1290499c4af2ffe238df5" kindref="member">VmaDefragmentationMove::srcAllocation</ref> e.g. using `vkCmdCopyBuffer`, `vkCmdCopyImage`. 3. Make sure these commands finished executing on the GPU. 4. Destroy the old buffer/image.</para>
<para>Only then you can finish defragmentation pass by calling <ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref>. After this call, the allocation will point to the new place in memory.</para>
<para>Alternatively, if you cannot move specific allocation, you can set <ref refid="struct_vma_defragmentation_move_1a20996a4686c9246dff77b375ac4a91e2" kindref="member">VmaDefragmentationMove::operation</ref> to <ref refid="group__group__alloc_1ggada9e3861caf96f08894b0bcc160ec257ad25bc6f816b226b4fd5170e845f218d2" kindref="member">VMA_DEFRAGMENTATION_MOVE_OPERATION_IGNORE</ref>.</para>
<para>Alternatively, if you decide you want to completely remove the allocation:</para>
<para>1. Destroy its buffer/image. 2. Set <ref refid="struct_vma_defragmentation_move_1a20996a4686c9246dff77b375ac4a91e2" kindref="member">VmaDefragmentationMove::operation</ref> to <ref refid="group__group__alloc_1ggada9e3861caf96f08894b0bcc160ec257a9786f8492a9be2c03bd26395e352ab85" kindref="member">VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY</ref>.</para>
<para>Then, after <ref refid="group__group__alloc_1gabbc69db60f82972ddffaceb6653e344a" kindref="member">vmaEndDefragmentationPass()</ref> the allocation will be freed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1467" column="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parameters for incremental defragmentation steps. </para>
    </briefdescription>
    <detaileddescription>
<para>To be used with function <ref refid="group__group__alloc_1gacbe4a77fdfa7ea29328d2f940d423ab7" kindref="member">vmaBeginDefragmentationPass()</ref>. </para>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="1440" column="1" bodyfile="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" bodystart="1441" bodyend="1468"/>
    <listofallmembers>
      <member refid="struct_vma_defragmentation_pass_move_info_1a1b3e18c23f9691f35baf183e615c4408" prot="public" virt="non-virtual"><scope>VmaDefragmentationPassMoveInfo</scope><name>moveCount</name></member>
      <member refid="struct_vma_defragmentation_pass_move_info_1a761d239e4d75f197dc301c33be31d140" prot="public" virt="non-virtual"><scope>VmaDefragmentationPassMoveInfo</scope><name>VMA_LEN_IF_NOT_NULL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
