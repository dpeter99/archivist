<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="struct_vma_allocation" kind="struct" language="C++" prot="public">
    <compoundname>VmaAllocation</compoundname>
    <includes refid="vk__mem__alloc_8h" local="no">vk_mem_alloc.h</includes>
    <briefdescription>
<para>Represents single memory allocation. </para>
    </briefdescription>
    <detaileddescription>
<para>It may be either dedicated block of `VkDeviceMemory` or a specific region of a bigger block of this type plus unique offset.</para>
<para>There are multiple ways to create such object. You need to fill structure <ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref>. For more information see [Choosing memory type](<ref refid="choosing_memory_type" kindref="compound">Choosing memory type</ref>).</para>
<para>Although the library provides convenience functions that create Vulkan buffer or image, allocate memory for it and bind them together, binding of the allocation to a buffer or an image is out of scope of the allocation itself. Allocation object can exist without buffer/image bound, binding can be done manually by the user, and destruction of it can be done independently of destruction of the allocation.</para>
<para>The object also remembers its size and some other information. To retrieve this information, use function <ref refid="group__group__alloc_1gab9c96ca6bb55ad9069829fe8355bbb79" kindref="member">vmaGetAllocationInfo()</ref> and inspect returned structure <ref refid="struct_vma_allocation_info" kindref="compound">VmaAllocationInfo</ref>. </para>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h" line="845" column="1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
