<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="choosing_memory_type" kind="page">
    <compoundname>choosing_memory_type</compoundname>
    <title>Choosing memory type</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Physical devices in Vulkan support various combinations of memory heaps and types. Help with choosing correct and optimal memory type for your specific resource is one of the key features of this library. You can use it by filling appropriate members of <ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref> structure, as described below. You can also combine multiple methods.</para>
<para><orderedlist>
<listitem><para>If you just want to find memory type index that meets your requirements, you can use function: <ref refid="group__group__alloc_1ga723f5683b363c306bf860dab1861f299" kindref="member">vmaFindMemoryTypeIndexForBufferInfo()</ref>, <ref refid="group__group__alloc_1gaaf05345771a087328949b485ff2da4db" kindref="member">vmaFindMemoryTypeIndexForImageInfo()</ref>, <ref refid="group__group__alloc_1ga03cee2bfc7fef20382fa56f5870f3b2f" kindref="member">vmaFindMemoryTypeIndex()</ref>.</para>
</listitem><listitem><para>If you want to allocate a region of device memory without association with any specific image or buffer, you can use function <ref refid="group__group__alloc_1gaf813f55a0667016a8cd68bb4b8b3b30c" kindref="member">vmaAllocateMemory()</ref>. Usage of this function is not recommended and usually not needed. <ref refid="group__group__alloc_1gafe6834626398ff26264a94ab7581e150" kindref="member">vmaAllocateMemoryPages()</ref> function is also provided for creating multiple allocations at once, which may be useful for sparse binding.</para>
</listitem><listitem><para>If you already have a buffer or an image created, you want to allocate memory for it and then you will bind it yourself, you can use function <ref refid="group__group__alloc_1gaf7010aa90a4ccdda56f83db8597b9896" kindref="member">vmaAllocateMemoryForBuffer()</ref>, <ref refid="group__group__alloc_1ga4b7f39281cb383c1496b68f97cb7f4c5" kindref="member">vmaAllocateMemoryForImage()</ref>. For binding you should use functions: <ref refid="group__group__alloc_1ga7748e60ccc54e240777a848cb260bb19" kindref="member">vmaBindBufferMemory()</ref>, <ref refid="group__group__alloc_1ga3a5d8d9f2a29b42cf87f0f8dfef591f4" kindref="member">vmaBindImageMemory()</ref> or their extended versions: <ref refid="group__group__alloc_1ga4a71c30e3474a835bdd7fd0507740be7" kindref="member">vmaBindBufferMemory2()</ref>, <ref refid="group__group__alloc_1ga0216b9225b02a66ac610cb45d4729d00" kindref="member">vmaBindImageMemory2()</ref>.</para>
</listitem><listitem><para>**This is the easiest and recommended way to use this library:** If you want to create a buffer or an image, allocate memory for it and bind them together, all in one call, you can use function <ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer()</ref>, <ref refid="group__group__alloc_1gaa76142ae43535c862ad9e194a6e38aaa" kindref="member">vmaCreateImage()</ref>.</para>
</listitem></orderedlist>
</para>
<para>When using 3. or 4., the library internally queries Vulkan for memory types supported for that buffer or image (function `vkGetBufferMemoryRequirements()`) and uses only one of these types.</para>
<para>If no memory type can be found that meets all the requirements, these functions return `VK_ERROR_FEATURE_NOT_PRESENT`.</para>
<para>You can leave <ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref> structure completely filled with zeros. It means no requirements are specified for memory type. It is valid, although not very useful.</para>
<sect1 id="choosing_memory_type_1choosing_memory_type_usage">
<title>Usage</title>
<para>The easiest way to specify memory requirements is to fill member <ref refid="struct_vma_allocation_create_info_1accb8b06b1f677d858cb9af20705fa910" kindref="member">VmaAllocationCreateInfo::usage</ref> using one of the values of enum <ref refid="group__group__alloc_1gaa5846affa1e9da3800e3e78fae2305cc" kindref="member">VmaMemoryUsage</ref>. It defines high level, common usage types. Since version 3 of the library, it is recommended to use <ref refid="group__group__alloc_1ggaa5846affa1e9da3800e3e78fae2305cca27cde9026a84d34d525777baa41fce6e" kindref="member">VMA_MEMORY_USAGE_AUTO</ref> to let it select best memory type for your resource automatically.</para>
<para>For example, if you want to create a uniform buffer that will be filled using transfer only once or infrequently and then used for rendering every frame as a uniform buffer, you can do it using following code. The buffer will most likely end up in a memory type with `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` to be fast to access by the GPU device.</para>
<para><programlisting><codeline><highlight class="normal">VkBufferCreateInfo<sp/>bufferInfo<sp/>=<sp/>{<sp/>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO<sp/>};</highlight></codeline>
<codeline><highlight class="normal">bufferInfo.size<sp/>=<sp/>65536;</highlight></codeline>
<codeline><highlight class="normal">bufferInfo.usage<sp/>=<sp/>VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT<sp/>|<sp/>VK_BUFFER_USAGE_TRANSFER_DST_BIT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref><sp/>allocInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">allocInfo.<ref refid="struct_vma_allocation_create_info_1accb8b06b1f677d858cb9af20705fa910" kindref="member">usage</ref><sp/>=<sp/><ref refid="group__group__alloc_1ggaa5846affa1e9da3800e3e78fae2305cca27cde9026a84d34d525777baa41fce6e" kindref="member">VMA_MEMORY_USAGE_AUTO</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">VkBuffer<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation" kindref="compound">VmaAllocation</ref><sp/>allocation;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer</ref>(allocator,<sp/>&amp;bufferInfo,<sp/>&amp;allocInfo,<sp/>&amp;buffer,<sp/>&amp;allocation,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>If you have a preference for putting the resource in GPU (device) memory or CPU (host) memory on systems with discrete graphics card that have the memories separate, you can use <ref refid="group__group__alloc_1ggaa5846affa1e9da3800e3e78fae2305ccae2adb696d6a73c18bb20c23666661327" kindref="member">VMA_MEMORY_USAGE_AUTO_PREFER_DEVICE</ref> or <ref refid="group__group__alloc_1ggaa5846affa1e9da3800e3e78fae2305cca9b422585242160b8ed3418310ee6664d" kindref="member">VMA_MEMORY_USAGE_AUTO_PREFER_HOST</ref>.</para>
<para>When using `VMA_MEMORY_USAGE_AUTO*` while you want to map the allocated memory, you also need to specify one of the host access flags: <ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597a9be224df3bfc1cfa06203aed689a30c5" kindref="member">VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT</ref> or <ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597add61238d98e20917b9a06c617763f492" kindref="member">VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT</ref>. This will help the library decide about preferred memory type to ensure it has `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` so you can map it.</para>
<para>For example, a staging buffer that will be filled via mapped pointer and then used as a source of transfer to the buffer decribed previously can be created like this. It will likely and up in a memory type that is `HOST_VISIBLE` and `HOST_COHERENT` but not `HOST_CACHED` (meaning uncached, write-combined) and not `DEVICE_LOCAL` (meaning system RAM).</para>
<para><programlisting><codeline><highlight class="normal">VkBufferCreateInfo<sp/>stagingBufferInfo<sp/>=<sp/>{<sp/>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO<sp/>};</highlight></codeline>
<codeline><highlight class="normal">stagingBufferInfo.size<sp/>=<sp/>65536;</highlight></codeline>
<codeline><highlight class="normal">stagingBufferInfo.usage<sp/>=<sp/>VK_BUFFER_USAGE_TRANSFER_SRC_BIT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref><sp/>stagingAllocInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">stagingAllocInfo.<ref refid="struct_vma_allocation_create_info_1accb8b06b1f677d858cb9af20705fa910" kindref="member">usage</ref><sp/>=<sp/><ref refid="group__group__alloc_1ggaa5846affa1e9da3800e3e78fae2305cca27cde9026a84d34d525777baa41fce6e" kindref="member">VMA_MEMORY_USAGE_AUTO</ref>;</highlight></codeline>
<codeline><highlight class="normal">stagingAllocInfo.<ref refid="struct_vma_allocation_create_info_1add09658ac14fe290ace25470ddd6d41b" kindref="member">flags</ref><sp/>=<sp/><ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597a9be224df3bfc1cfa06203aed689a30c5" kindref="member">VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">VkBuffer<sp/>stagingBuffer;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation" kindref="compound">VmaAllocation</ref><sp/>stagingAllocation;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer</ref>(allocator,<sp/>&amp;stagingBufferInfo,<sp/>&amp;stagingAllocInfo,<sp/>&amp;stagingBuffer,<sp/>&amp;stagingAllocation,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>For more examples of creating different kinds of resources, see chapter <ref refid="usage_patterns" kindref="compound">Recommended usage patterns</ref>.</para>
<para>Usage values `VMA_MEMORY_USAGE_AUTO*` are legal to use only when the library knows about the resource being created by having `VkBufferCreateInfo` / `VkImageCreateInfo` passed, so they work with functions like: <ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer()</ref>, <ref refid="group__group__alloc_1gaa76142ae43535c862ad9e194a6e38aaa" kindref="member">vmaCreateImage()</ref>, <ref refid="group__group__alloc_1ga723f5683b363c306bf860dab1861f299" kindref="member">vmaFindMemoryTypeIndexForBufferInfo()</ref> etc. If you allocate raw memory using function <ref refid="group__group__alloc_1gaf813f55a0667016a8cd68bb4b8b3b30c" kindref="member">vmaAllocateMemory()</ref>, you have to use other means of selecting memory type, as decribed below.</para>
<para><simplesect kind="note"><para>Old usage values (`VMA_MEMORY_USAGE_GPU_ONLY`, `VMA_MEMORY_USAGE_CPU_ONLY`, `VMA_MEMORY_USAGE_CPU_TO_GPU`, `VMA_MEMORY_USAGE_GPU_TO_CPU`, `VMA_MEMORY_USAGE_CPU_COPY`) are still available and work same way as in previous versions of the library for backward compatibility, but they are not recommended.</para>
</simplesect>
</para>
</sect1>
<sect1 id="choosing_memory_type_1choosing_memory_type_required_preferred_flags">
<title>Required and preferred flags</title>
<para>You can specify more detailed requirements by filling members <ref refid="struct_vma_allocation_create_info_1a9166390303ff42d783305bc31c2b6b90" kindref="member">VmaAllocationCreateInfo::requiredFlags</ref> and <ref refid="struct_vma_allocation_create_info_1a7fe8d81a1ad10b2a2faacacee5b15d6d" kindref="member">VmaAllocationCreateInfo::preferredFlags</ref> with a combination of bits from enum `VkMemoryPropertyFlags`. For example, if you want to create a buffer that will be persistently mapped on host (so it must be `HOST_VISIBLE`) and preferably will also be `HOST_COHERENT` and `HOST_CACHED`, use following code:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref><sp/>allocInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">allocInfo.<ref refid="struct_vma_allocation_create_info_1a9166390303ff42d783305bc31c2b6b90" kindref="member">requiredFlags</ref><sp/>=<sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;</highlight></codeline>
<codeline><highlight class="normal">allocInfo.<ref refid="struct_vma_allocation_create_info_1a7fe8d81a1ad10b2a2faacacee5b15d6d" kindref="member">preferredFlags</ref><sp/>=<sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT<sp/>|<sp/>VK_MEMORY_PROPERTY_HOST_CACHED_BIT;</highlight></codeline>
<codeline><highlight class="normal">allocInfo.<ref refid="struct_vma_allocation_create_info_1add09658ac14fe290ace25470ddd6d41b" kindref="member">flags</ref><sp/>=<sp/><ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597add61238d98e20917b9a06c617763f492" kindref="member">VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT</ref><sp/>|<sp/><ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597a11da372cc3a82931c5e5d6146cd9dd1f" kindref="member">VMA_ALLOCATION_CREATE_MAPPED_BIT</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">VkBuffer<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation" kindref="compound">VmaAllocation</ref><sp/>allocation;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer</ref>(allocator,<sp/>&amp;bufferInfo,<sp/>&amp;allocInfo,<sp/>&amp;buffer,<sp/>&amp;allocation,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>A memory type is chosen that has all the required flags and as many preferred flags set as possible.</para>
<para>Value passed in <ref refid="struct_vma_allocation_create_info_1accb8b06b1f677d858cb9af20705fa910" kindref="member">VmaAllocationCreateInfo::usage</ref> is internally converted to a set of required and preferred flags, plus some extra &quot;magic&quot; (heuristics).</para>
</sect1>
<sect1 id="choosing_memory_type_1choosing_memory_type_explicit_memory_types">
<title>Explicit memory types</title>
<para>If you inspected memory types available on the physical device and you have a preference for memory types that you want to use, you can fill member <ref refid="struct_vma_allocation_create_info_1a3bf940c0271d85d6ba32a4d820075055" kindref="member">VmaAllocationCreateInfo::memoryTypeBits</ref>. It is a bit mask, where each bit set means that a memory type with that index is allowed to be used for the allocation. Special value 0, just like `UINT32_MAX`, means there are no restrictions to memory type index.</para>
<para>Please note that this member is NOT just a memory type index. Still you can use it to choose just one, specific memory type. For example, if you already determined that your buffer should be created in memory type 2, use following code:</para>
<para><programlisting><codeline><highlight class="normal">uint32_t<sp/>memoryTypeIndex<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref><sp/>allocInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">allocInfo.<ref refid="struct_vma_allocation_create_info_1a3bf940c0271d85d6ba32a4d820075055" kindref="member">memoryTypeBits</ref><sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>memoryTypeIndex;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">VkBuffer<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_vma_allocation" kindref="compound">VmaAllocation</ref><sp/>allocation;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__alloc_1gae9773fe0ef8582e23136d2d83c336ab9" kindref="member">vmaCreateBuffer</ref>(allocator,<sp/>&amp;bufferInfo,<sp/>&amp;allocInfo,<sp/>&amp;buffer,<sp/>&amp;allocation,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="choosing_memory_type_1choosing_memory_type_custom_memory_pools">
<title>Custom memory pools</title>
<para>If you allocate from custom memory pool, all the ways of specifying memory requirements described above are not applicable and the aforementioned members of <ref refid="struct_vma_allocation_create_info" kindref="compound">VmaAllocationCreateInfo</ref> structure are ignored. Memory type is selected explicitly when creating the pool and then used to make all the allocations from that pool. For further details, see <ref refid="custom_memory_pools" kindref="compound">Custom memory pools</ref>.</para>
</sect1>
<sect1 id="choosing_memory_type_1choosing_memory_type_dedicated_allocations">
<title>Dedicated allocations</title>
<para>Memory for allocations is reserved out of larger block of `VkDeviceMemory` allocated from Vulkan internally. That is the main feature of this whole library. You can still request a separate memory block to be created for an allocation, just like you would do in a trivial solution without using any allocator. In that case, a buffer or image is always bound to that memory at offset 0. This is called a &quot;dedicated allocation&quot;. You can explicitly request it by using flag <ref refid="group__group__alloc_1ggad9889c10c798b040d59c92f257cae597a3fc311d855c2ff53f1090ef5c722b38f" kindref="member">VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT</ref>. The library can also internally decide to use dedicated allocation in some cases, e.g.:</para>
<para><itemizedlist>
<listitem><para>When the size of the allocation is large.</para>
</listitem><listitem><para>When [VK_KHR_dedicated_allocation](<ref refid="vk_khr_dedicated_allocation" kindref="compound">VK_KHR_dedicated_allocation</ref>) extension is enabled and it reports that dedicated allocation is required or recommended for the resource.</para>
</listitem><listitem><para>When allocation of next big memory block fails due to not enough device memory, but allocation with the exact requested size succeeds. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="shadow-engine/shadow-renderer/inc/vulkan/vk_mem_alloc.h"/>
  </compounddef>
</doxygen>
