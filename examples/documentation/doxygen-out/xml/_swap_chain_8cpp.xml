<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="_swap_chain_8cpp" kind="file" language="C++">
    <compoundname>SwapChain.cpp</compoundname>
    <includes refid="_swap_chain_8h" local="no">vlkx/vulkan/SwapChain.h</includes>
    <includes refid="_vulkan_module_8h" local="no">vlkx/vulkan/VulkanModule.h</includes>
    <includes local="yes">spdlog/spdlog.h</includes>
    <incdepgraph>
      <node id="29">
        <label>core/Module.h</label>
        <link refid="_module_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>exports.h</label>
        <link refid="exports_8h"/>
      </node>
      <node id="30">
        <label>SHObject.h</label>
        <link refid="_s_h_object_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vlkx/vulkan/SwapChain.h</label>
        <link refid="_swap_chain_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>vlkx/vulkan/Tools.h</label>
        <link refid="_tools_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>vlkx/vulkan/ValidationAndExtension.h</label>
        <link refid="_validation_and_extension_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>VulkanDevice.h</label>
        <link refid="_vulkan_device_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>vlkx/vulkan/VulkanModule.h</label>
        <link refid="_vulkan_module_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Buffer.h</label>
        <link refid="_buffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>vlkx/vulkan/abstraction/Commands.h</label>
        <link refid="_commands_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>vlkx/vulkan/abstraction/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ImageUsage.h</label>
        <link refid="_image_usage_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Queue.h</label>
        <link refid="_queue_8h"/>
      </node>
      <node id="11">
        <label>vulkan/vk_mem_alloc.h</label>
        <link refid="vk__mem__alloc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>shadow-engine/shadow-renderer/src/vulkan/SwapChain.cpp</label>
        <link refid="_swap_chain_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>shadow/util/RefCounter.h</label>
        <link refid="_ref_counter_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>SDL.h</label>
      </node>
      <node id="32">
        <label>SDL_events.h</label>
      </node>
      <node id="28">
        <label>SDL_vulkan.h</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>array</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>map</label>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="5">
        <label>set</label>
      </node>
      <node id="35">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="9">
        <label>stdexcept</label>
      </node>
      <node id="20">
        <label>string</label>
      </node>
      <node id="31">
        <label>typeinfo</label>
      </node>
      <node id="26">
        <label>utility</label>
      </node>
      <node id="24">
        <label>variant</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="3">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_swap_chain_8h" kindref="compound">vlkx/vulkan/SwapChain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_vulkan_module_8h" kindref="compound">vlkx/vulkan/VulkanModule.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="class_swap_chain_1ab1e68cac26bb0b4e97b68b9e4a3086a4" kindref="member">SwapChain::SwapChain</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="class_swap_chain_1a58c288346a3fa211fbcc2cec594bfa68" kindref="member">SwapChain::~SwapChain</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">VkSurfaceFormatKHR<sp/><ref refid="class_swap_chain_1a67b61054ef55729bf8fbbec5b513a592" kindref="member">SwapChain::chooseFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkSurfaceFormatKHR&gt;&amp;<sp/>availableFormats)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>any<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availableFormats.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>availableFormats[0].format<sp/>==<sp/>VK_FORMAT_UNDEFINED)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>to<sp/>BGRA,<sp/>sRGB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>VK_FORMAT_B8G8R8A8_UNORM,<sp/>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR<sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="class_swap_chain_1a973356d7e5c2cfd8076fa44154f948eb" kindref="member">format</ref><sp/>:<sp/>availableFormats)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prefer<sp/>BGRA<sp/>sRGB<sp/>if<sp/>it&apos;s<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_swap_chain_1a973356d7e5c2cfd8076fa44154f948eb" kindref="member">format</ref>.format<sp/>==<sp/>VK_FORMAT_B8G8R8A8_UNORM<sp/>&amp;&amp;<sp/><ref refid="class_swap_chain_1a973356d7e5c2cfd8076fa44154f948eb" kindref="member">format</ref>.colorSpace<sp/>==<sp/>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_swap_chain_1a973356d7e5c2cfd8076fa44154f948eb" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>BGRA<sp/>sRGB<sp/>isn&apos;t<sp/>an<sp/>option,<sp/>choose<sp/>whatever<sp/>Vulkan<sp/>thinks<sp/>is<sp/>the<sp/>best<sp/>option.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>availableFormats[0];</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">VkPresentModeKHR<sp/><ref refid="class_swap_chain_1a84a55df6428342758829a4c2ffe9a4d1" kindref="member">SwapChain::chooseMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkPresentModeKHR&gt;&amp;<sp/>availableModes)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>Mailbox,<sp/>Immediate<sp/>or<sp/>FIFO,<sp/>in<sp/>that<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentModeKHR<sp/>mode<sp/>=<sp/>availableModes[0];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>VK_PRESENT_MODE_MAILBOX_KHR<sp/>||<sp/>mode<sp/>==<sp/>VK_PRESENT_MODE_IMMEDIATE_KHR)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mode;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_PRESENT_MODE_FIFO_KHR;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">VkExtent2D<sp/><ref refid="class_swap_chain_1a446913ae7dcb8f19683d823cfd11b281" kindref="member">SwapChain::chooseExtent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkSurfaceCapabilitiesKHR&amp;<sp/>capabilities)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>our<sp/>extent<sp/>is<sp/>valid,<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capabilities.currentExtent.width<sp/>!=<sp/>std::numeric_limits&lt;uint32_t&gt;::max())</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capabilities.currentExtent;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>1280x720<sp/>extent<sp/>and<sp/>use<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkExtent2D<sp/>size<sp/>=<sp/>{<sp/>1280,<sp/>720<sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size.width<sp/>=<sp/>std::max(capabilities.minImageExtent.width,<sp/>std::min(capabilities.maxImageExtent.width,<sp/>size.width));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size.height<sp/>=<sp/>std::max(capabilities.minImageExtent.height,<sp/>std::min(capabilities.maxImageExtent.height,<sp/>size.height));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_swap_chain_1a0c46b7490ac26fe2d8b1818168c7ea9a" kindref="member">SwapChain::create</ref>(VkSurfaceKHR<sp/>surface)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_swap_chain_meta" kindref="compound">SwapChainMeta</ref><sp/>info<sp/>=<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>()-&gt;<ref refid="class_vulkan_device_1a586c899219c65739d352c9cbfb254555" kindref="member">swapChain</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceFormatKHR<sp/>chosenFormat<sp/>=<sp/><ref refid="class_swap_chain_1a67b61054ef55729bf8fbbec5b513a592" kindref="member">chooseFormat</ref>(info.<ref refid="struct_swap_chain_meta_1a9823f90cd333076c3e2cc9196730ff3d" kindref="member">formats</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentModeKHR<sp/>chosenMode<sp/>=<sp/><ref refid="class_swap_chain_1a84a55df6428342758829a4c2ffe9a4d1" kindref="member">chooseMode</ref>(info.<ref refid="struct_swap_chain_meta_1adc1c717be016e6119704a6f0d38075d0" kindref="member">modes</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>VkExtent2D<sp/>chosenExtent<sp/>=<sp/><ref refid="class_swap_chain_1a446913ae7dcb8f19683d823cfd11b281" kindref="member">chooseExtent</ref>(info.<ref refid="struct_swap_chain_meta_1a8ae5a9457f5477f6cdc810605356dd57" kindref="member">capabilities</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>max<sp/>if<sp/>it&apos;s<sp/>set,<sp/>otherwise<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>imageCount<sp/>=<sp/>std::max(info.<ref refid="struct_swap_chain_meta_1a8ae5a9457f5477f6cdc810605356dd57" kindref="member">capabilities</ref>.minImageCount,<sp/>(uint32_t)<sp/>2);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;SwapChain<sp/>has<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(imageCount)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>images.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>the<sp/>creation<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainCreateInfoKHR<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.surface<sp/>=<sp/>surface;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.minImageCount<sp/>=<sp/>imageCount;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageFormat<sp/>=<sp/>chosenFormat.format;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageColorSpace<sp/>=<sp/>chosenFormat.colorSpace;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageExtent<sp/>=<sp/>chosenExtent;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageArrayLayers<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>2<sp/>for<sp/>VR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageUsage<sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_families" kindref="compound">QueueFamilies</ref><sp/>queues<sp/>=<sp/><ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;<ref refid="class_vulkan_module_1acaf1d424d08049045241ce16405f60bf" kindref="member">getDevice</ref>()-&gt;<ref refid="class_vulkan_device_1ad1813c44f18ffdb4bb2b47ae0dfda837" kindref="member">getQueues</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>indices[]<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(queues.<ref refid="struct_queue_families_1af657ef9f0339098cb1aaa38c47b16a04" kindref="member">graphics</ref>),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(queues.<ref refid="struct_queue_families_1ad4857beda478527d0454e960636af458" kindref="member">presentation</ref>)<sp/>};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queues.<ref refid="struct_queue_families_1af657ef9f0339098cb1aaa38c47b16a04" kindref="member">graphics</ref><sp/>!=<sp/>queues.<ref refid="struct_queue_families_1ad4857beda478527d0454e960636af458" kindref="member">presentation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/>=<sp/>VK_SHARING_MODE_CONCURRENT;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/>=<sp/>indices;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.preTransform<sp/>=<sp/>info.<ref refid="struct_swap_chain_meta_1a8ae5a9457f5477f6cdc810605356dd57" kindref="member">capabilities</ref>.currentTransform;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.compositeAlpha<sp/>=<sp/>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.presentMode<sp/>=<sp/>chosenMode;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.clipped<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.oldSwapchain<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>swap-chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateSwapchainKHR(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;logical,<sp/>&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_swap_chain_1a4dc5f39b6548457c13a4b3e4f80a2bd5" kindref="member">swapChain</ref>))</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>swap-chain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_swap_chain_1a973356d7e5c2cfd8076fa44154f948eb" kindref="member">format</ref><sp/>=<sp/>chosenFormat.format;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_swap_chain_1a206037434aed234b79446d77151f155d" kindref="member">extent</ref><sp/>=<sp/>chosenExtent;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fetch<sp/>our<sp/>images<sp/>from<sp/>the<sp/>swapchain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>swapchainImgCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetSwapchainImagesKHR(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;logical,<sp/><ref refid="class_swap_chain_1a4dc5f39b6548457c13a4b3e4f80a2bd5" kindref="member">swapChain</ref>,<sp/>&amp;swapchainImgCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkImage&gt;<sp/>swapchainImgs(swapchainImgCount);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetSwapchainImagesKHR(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;logical,<sp/><ref refid="class_swap_chain_1a4dc5f39b6548457c13a4b3e4f80a2bd5" kindref="member">swapChain</ref>,<sp/>&amp;swapchainImgCount,<sp/>swapchainImgs.data());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_swap_chain_1a9b4c944341c67e67daf6e617f79def53" kindref="member">images</ref>.resize(0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_swap_chain_1a9b4c944341c67e67daf6e617f79def53" kindref="member">images</ref>.reserve(imageCount);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>img<sp/>:<sp/>swapchainImgs)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_swap_chain_1a9b4c944341c67e67daf6e617f79def53" kindref="member">images</ref>.emplace_back(std::make_unique&lt;vlkx::SwapchainImage&gt;(img,<sp/><ref refid="class_swap_chain_1a206037434aed234b79446d77151f155d" kindref="member">extent</ref>,<sp/><ref refid="class_swap_chain_1a973356d7e5c2cfd8076fa44154f948eb" kindref="member">format</ref>));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_swap_chain_1a492d4bf86eae9e273068dee33056eed1" kindref="member">SwapChain::destroy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySwapchainKHR(<ref refid="class_vulkan_module_1ae98fb6b5c4497288b51c9c4b860cb1bd" kindref="member">VulkanModule::getInstance</ref>()-&gt;getDevice()-&gt;logical,<sp/><ref refid="class_swap_chain_1a4dc5f39b6548457c13a4b3e4f80a2bd5" kindref="member">swapChain</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*for<sp/>(auto<sp/>&amp;<sp/>image<sp/>:<sp/>images)</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.reset();</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>multisampleImg.reset();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="shadow-engine/shadow-renderer/src/vulkan/SwapChain.cpp"/>
  </compounddef>
</doxygen>
